<?php
/**
 * Rels1
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ListenBrainz Swagger - OpenAPI 3.0
 *
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Rels1 Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Rels1 implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'rels_1';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'free_streaming' => 'string',
        'lyrics' => 'string',
        'official_homepage' => 'string',
        'purchase_for_download' => 'string',
        'download_for_free' => 'string',
        'purchase_for_mail_order' => 'string',
        'social_network' => 'string',
        'streaming' => 'string',
        'wikidata' => 'string',
        'youtube' => 'string',
        'patronage' => 'string',
        'crowdfunding' => 'string',
        'blog' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'free_streaming' => null,
        'lyrics' => null,
        'official_homepage' => null,
        'purchase_for_download' => null,
        'download_for_free' => null,
        'purchase_for_mail_order' => null,
        'social_network' => null,
        'streaming' => null,
        'wikidata' => null,
        'youtube' => null,
        'patronage' => null,
        'crowdfunding' => null,
        'blog' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'free_streaming' => false,
        'lyrics' => false,
        'official_homepage' => false,
        'purchase_for_download' => false,
        'download_for_free' => false,
        'purchase_for_mail_order' => false,
        'social_network' => false,
        'streaming' => false,
        'wikidata' => false,
        'youtube' => false,
        'patronage' => false,
        'crowdfunding' => false,
        'blog' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'free_streaming' => 'free streaming',
        'lyrics' => 'lyrics',
        'official_homepage' => 'official homepage',
        'purchase_for_download' => 'purchase for download',
        'download_for_free' => 'download for free',
        'purchase_for_mail_order' => 'purchase for mail-order',
        'social_network' => 'social network',
        'streaming' => 'streaming',
        'wikidata' => 'wikidata',
        'youtube' => 'youtube',
        'patronage' => 'patronage',
        'crowdfunding' => 'crowdfunding',
        'blog' => 'blog'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'free_streaming' => 'setFreeStreaming',
        'lyrics' => 'setLyrics',
        'official_homepage' => 'setOfficialHomepage',
        'purchase_for_download' => 'setPurchaseForDownload',
        'download_for_free' => 'setDownloadForFree',
        'purchase_for_mail_order' => 'setPurchaseForMailOrder',
        'social_network' => 'setSocialNetwork',
        'streaming' => 'setStreaming',
        'wikidata' => 'setWikidata',
        'youtube' => 'setYoutube',
        'patronage' => 'setPatronage',
        'crowdfunding' => 'setCrowdfunding',
        'blog' => 'setBlog'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'free_streaming' => 'getFreeStreaming',
        'lyrics' => 'getLyrics',
        'official_homepage' => 'getOfficialHomepage',
        'purchase_for_download' => 'getPurchaseForDownload',
        'download_for_free' => 'getDownloadForFree',
        'purchase_for_mail_order' => 'getPurchaseForMailOrder',
        'social_network' => 'getSocialNetwork',
        'streaming' => 'getStreaming',
        'wikidata' => 'getWikidata',
        'youtube' => 'getYoutube',
        'patronage' => 'getPatronage',
        'crowdfunding' => 'getCrowdfunding',
        'blog' => 'getBlog'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('free_streaming', $data ?? [], null);
        $this->setIfExists('lyrics', $data ?? [], null);
        $this->setIfExists('official_homepage', $data ?? [], null);
        $this->setIfExists('purchase_for_download', $data ?? [], null);
        $this->setIfExists('download_for_free', $data ?? [], null);
        $this->setIfExists('purchase_for_mail_order', $data ?? [], null);
        $this->setIfExists('social_network', $data ?? [], null);
        $this->setIfExists('streaming', $data ?? [], null);
        $this->setIfExists('wikidata', $data ?? [], null);
        $this->setIfExists('youtube', $data ?? [], null);
        $this->setIfExists('patronage', $data ?? [], null);
        $this->setIfExists('crowdfunding', $data ?? [], null);
        $this->setIfExists('blog', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets free_streaming
     *
     * @return string|null
     */
    public function getFreeStreaming()
    {
        return $this->container['free_streaming'];
    }

    /**
     * Sets free_streaming
     *
     * @param string|null $free_streaming free_streaming
     *
     * @return self
     */
    public function setFreeStreaming($free_streaming)
    {
        if (is_null($free_streaming)) {
            throw new \InvalidArgumentException('non-nullable free_streaming cannot be null');
        }
        $this->container['free_streaming'] = $free_streaming;

        return $this;
    }

    /**
     * Gets lyrics
     *
     * @return string|null
     */
    public function getLyrics()
    {
        return $this->container['lyrics'];
    }

    /**
     * Sets lyrics
     *
     * @param string|null $lyrics lyrics
     *
     * @return self
     */
    public function setLyrics($lyrics)
    {
        if (is_null($lyrics)) {
            throw new \InvalidArgumentException('non-nullable lyrics cannot be null');
        }
        $this->container['lyrics'] = $lyrics;

        return $this;
    }

    /**
     * Gets official_homepage
     *
     * @return string|null
     */
    public function getOfficialHomepage()
    {
        return $this->container['official_homepage'];
    }

    /**
     * Sets official_homepage
     *
     * @param string|null $official_homepage official_homepage
     *
     * @return self
     */
    public function setOfficialHomepage($official_homepage)
    {
        if (is_null($official_homepage)) {
            throw new \InvalidArgumentException('non-nullable official_homepage cannot be null');
        }
        $this->container['official_homepage'] = $official_homepage;

        return $this;
    }

    /**
     * Gets purchase_for_download
     *
     * @return string|null
     */
    public function getPurchaseForDownload()
    {
        return $this->container['purchase_for_download'];
    }

    /**
     * Sets purchase_for_download
     *
     * @param string|null $purchase_for_download purchase_for_download
     *
     * @return self
     */
    public function setPurchaseForDownload($purchase_for_download)
    {
        if (is_null($purchase_for_download)) {
            throw new \InvalidArgumentException('non-nullable purchase_for_download cannot be null');
        }
        $this->container['purchase_for_download'] = $purchase_for_download;

        return $this;
    }

    /**
     * Gets download_for_free
     *
     * @return string|null
     */
    public function getDownloadForFree()
    {
        return $this->container['download_for_free'];
    }

    /**
     * Sets download_for_free
     *
     * @param string|null $download_for_free download_for_free
     *
     * @return self
     */
    public function setDownloadForFree($download_for_free)
    {
        if (is_null($download_for_free)) {
            throw new \InvalidArgumentException('non-nullable download_for_free cannot be null');
        }
        $this->container['download_for_free'] = $download_for_free;

        return $this;
    }

    /**
     * Gets purchase_for_mail_order
     *
     * @return string|null
     */
    public function getPurchaseForMailOrder()
    {
        return $this->container['purchase_for_mail_order'];
    }

    /**
     * Sets purchase_for_mail_order
     *
     * @param string|null $purchase_for_mail_order purchase_for_mail_order
     *
     * @return self
     */
    public function setPurchaseForMailOrder($purchase_for_mail_order)
    {
        if (is_null($purchase_for_mail_order)) {
            throw new \InvalidArgumentException('non-nullable purchase_for_mail_order cannot be null');
        }
        $this->container['purchase_for_mail_order'] = $purchase_for_mail_order;

        return $this;
    }

    /**
     * Gets social_network
     *
     * @return string|null
     */
    public function getSocialNetwork()
    {
        return $this->container['social_network'];
    }

    /**
     * Sets social_network
     *
     * @param string|null $social_network social_network
     *
     * @return self
     */
    public function setSocialNetwork($social_network)
    {
        if (is_null($social_network)) {
            throw new \InvalidArgumentException('non-nullable social_network cannot be null');
        }
        $this->container['social_network'] = $social_network;

        return $this;
    }

    /**
     * Gets streaming
     *
     * @return string|null
     */
    public function getStreaming()
    {
        return $this->container['streaming'];
    }

    /**
     * Sets streaming
     *
     * @param string|null $streaming streaming
     *
     * @return self
     */
    public function setStreaming($streaming)
    {
        if (is_null($streaming)) {
            throw new \InvalidArgumentException('non-nullable streaming cannot be null');
        }
        $this->container['streaming'] = $streaming;

        return $this;
    }

    /**
     * Gets wikidata
     *
     * @return string|null
     */
    public function getWikidata()
    {
        return $this->container['wikidata'];
    }

    /**
     * Sets wikidata
     *
     * @param string|null $wikidata wikidata
     *
     * @return self
     */
    public function setWikidata($wikidata)
    {
        if (is_null($wikidata)) {
            throw new \InvalidArgumentException('non-nullable wikidata cannot be null');
        }
        $this->container['wikidata'] = $wikidata;

        return $this;
    }

    /**
     * Gets youtube
     *
     * @return string|null
     */
    public function getYoutube()
    {
        return $this->container['youtube'];
    }

    /**
     * Sets youtube
     *
     * @param string|null $youtube youtube
     *
     * @return self
     */
    public function setYoutube($youtube)
    {
        if (is_null($youtube)) {
            throw new \InvalidArgumentException('non-nullable youtube cannot be null');
        }
        $this->container['youtube'] = $youtube;

        return $this;
    }

    /**
     * Gets patronage
     *
     * @return string|null
     */
    public function getPatronage()
    {
        return $this->container['patronage'];
    }

    /**
     * Sets patronage
     *
     * @param string|null $patronage patronage
     *
     * @return self
     */
    public function setPatronage($patronage)
    {
        if (is_null($patronage)) {
            throw new \InvalidArgumentException('non-nullable patronage cannot be null');
        }
        $this->container['patronage'] = $patronage;

        return $this;
    }

    /**
     * Gets crowdfunding
     *
     * @return string|null
     */
    public function getCrowdfunding()
    {
        return $this->container['crowdfunding'];
    }

    /**
     * Sets crowdfunding
     *
     * @param string|null $crowdfunding crowdfunding
     *
     * @return self
     */
    public function setCrowdfunding($crowdfunding)
    {
        if (is_null($crowdfunding)) {
            throw new \InvalidArgumentException('non-nullable crowdfunding cannot be null');
        }
        $this->container['crowdfunding'] = $crowdfunding;

        return $this;
    }

    /**
     * Gets blog
     *
     * @return string|null
     */
    public function getBlog()
    {
        return $this->container['blog'];
    }

    /**
     * Sets blog
     *
     * @param string|null $blog blog
     *
     * @return self
     */
    public function setBlog($blog)
    {
        if (is_null($blog)) {
            throw new \InvalidArgumentException('non-nullable blog cannot be null');
        }
        $this->container['blog'] = $blog;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


