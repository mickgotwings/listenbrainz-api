<?php
/**
 * ListenersForArtistPayload
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ListenBrainz Swagger - OpenAPI 3.0
 *
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * ListenersForArtistPayload Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class ListenersForArtistPayload implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'listenersForArtist_payload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'artist_mbid' => 'string',
        'artist_name' => 'string',
        'from_ts' => 'int',
        'last_updated' => 'int',
        'listeners' => '\OpenAPI\Client\Model\ListenersForArtistPayloadListenersInner[]',
        'stats_range' => 'string',
        'to_ts' => 'int',
        'total_listen_count' => 'int',
        'total_user_count' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'artist_mbid' => 'uuid',
        'artist_name' => null,
        'from_ts' => null,
        'last_updated' => null,
        'listeners' => null,
        'stats_range' => null,
        'to_ts' => null,
        'total_listen_count' => null,
        'total_user_count' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'artist_mbid' => false,
        'artist_name' => false,
        'from_ts' => false,
        'last_updated' => false,
        'listeners' => false,
        'stats_range' => false,
        'to_ts' => false,
        'total_listen_count' => false,
        'total_user_count' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'artist_mbid' => 'artist_mbid',
        'artist_name' => 'artist_name',
        'from_ts' => 'from_ts',
        'last_updated' => 'last_updated',
        'listeners' => 'listeners',
        'stats_range' => 'stats_range',
        'to_ts' => 'to_ts',
        'total_listen_count' => 'total_listen_count',
        'total_user_count' => 'total_user_count'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'artist_mbid' => 'setArtistMbid',
        'artist_name' => 'setArtistName',
        'from_ts' => 'setFromTs',
        'last_updated' => 'setLastUpdated',
        'listeners' => 'setListeners',
        'stats_range' => 'setStatsRange',
        'to_ts' => 'setToTs',
        'total_listen_count' => 'setTotalListenCount',
        'total_user_count' => 'setTotalUserCount'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'artist_mbid' => 'getArtistMbid',
        'artist_name' => 'getArtistName',
        'from_ts' => 'getFromTs',
        'last_updated' => 'getLastUpdated',
        'listeners' => 'getListeners',
        'stats_range' => 'getStatsRange',
        'to_ts' => 'getToTs',
        'total_listen_count' => 'getTotalListenCount',
        'total_user_count' => 'getTotalUserCount'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('artist_mbid', $data ?? [], null);
        $this->setIfExists('artist_name', $data ?? [], null);
        $this->setIfExists('from_ts', $data ?? [], null);
        $this->setIfExists('last_updated', $data ?? [], null);
        $this->setIfExists('listeners', $data ?? [], null);
        $this->setIfExists('stats_range', $data ?? [], null);
        $this->setIfExists('to_ts', $data ?? [], null);
        $this->setIfExists('total_listen_count', $data ?? [], null);
        $this->setIfExists('total_user_count', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['artist_mbid'] === null) {
            $invalidProperties[] = "'artist_mbid' can't be null";
        }
        if ($this->container['artist_name'] === null) {
            $invalidProperties[] = "'artist_name' can't be null";
        }
        if ($this->container['from_ts'] === null) {
            $invalidProperties[] = "'from_ts' can't be null";
        }
        if ($this->container['last_updated'] === null) {
            $invalidProperties[] = "'last_updated' can't be null";
        }
        if ($this->container['listeners'] === null) {
            $invalidProperties[] = "'listeners' can't be null";
        }
        if ($this->container['stats_range'] === null) {
            $invalidProperties[] = "'stats_range' can't be null";
        }
        if ($this->container['to_ts'] === null) {
            $invalidProperties[] = "'to_ts' can't be null";
        }
        if ($this->container['total_listen_count'] === null) {
            $invalidProperties[] = "'total_listen_count' can't be null";
        }
        if ($this->container['total_user_count'] === null) {
            $invalidProperties[] = "'total_user_count' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets artist_mbid
     *
     * @return string
     */
    public function getArtistMbid()
    {
        return $this->container['artist_mbid'];
    }

    /**
     * Sets artist_mbid
     *
     * @param string $artist_mbid artist_mbid
     *
     * @return self
     */
    public function setArtistMbid($artist_mbid)
    {
        if (is_null($artist_mbid)) {
            throw new \InvalidArgumentException('non-nullable artist_mbid cannot be null');
        }
        $this->container['artist_mbid'] = $artist_mbid;

        return $this;
    }

    /**
     * Gets artist_name
     *
     * @return string
     */
    public function getArtistName()
    {
        return $this->container['artist_name'];
    }

    /**
     * Sets artist_name
     *
     * @param string $artist_name artist_name
     *
     * @return self
     */
    public function setArtistName($artist_name)
    {
        if (is_null($artist_name)) {
            throw new \InvalidArgumentException('non-nullable artist_name cannot be null');
        }
        $this->container['artist_name'] = $artist_name;

        return $this;
    }

    /**
     * Gets from_ts
     *
     * @return int
     */
    public function getFromTs()
    {
        return $this->container['from_ts'];
    }

    /**
     * Sets from_ts
     *
     * @param int $from_ts from_ts
     *
     * @return self
     */
    public function setFromTs($from_ts)
    {
        if (is_null($from_ts)) {
            throw new \InvalidArgumentException('non-nullable from_ts cannot be null');
        }
        $this->container['from_ts'] = $from_ts;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return int
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param int $last_updated last_updated
     *
     * @return self
     */
    public function setLastUpdated($last_updated)
    {
        if (is_null($last_updated)) {
            throw new \InvalidArgumentException('non-nullable last_updated cannot be null');
        }
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets listeners
     *
     * @return \OpenAPI\Client\Model\ListenersForArtistPayloadListenersInner[]
     */
    public function getListeners()
    {
        return $this->container['listeners'];
    }

    /**
     * Sets listeners
     *
     * @param \OpenAPI\Client\Model\ListenersForArtistPayloadListenersInner[] $listeners listeners
     *
     * @return self
     */
    public function setListeners($listeners)
    {
        if (is_null($listeners)) {
            throw new \InvalidArgumentException('non-nullable listeners cannot be null');
        }
        $this->container['listeners'] = $listeners;

        return $this;
    }

    /**
     * Gets stats_range
     *
     * @return string
     */
    public function getStatsRange()
    {
        return $this->container['stats_range'];
    }

    /**
     * Sets stats_range
     *
     * @param string $stats_range stats_range
     *
     * @return self
     */
    public function setStatsRange($stats_range)
    {
        if (is_null($stats_range)) {
            throw new \InvalidArgumentException('non-nullable stats_range cannot be null');
        }
        $this->container['stats_range'] = $stats_range;

        return $this;
    }

    /**
     * Gets to_ts
     *
     * @return int
     */
    public function getToTs()
    {
        return $this->container['to_ts'];
    }

    /**
     * Sets to_ts
     *
     * @param int $to_ts to_ts
     *
     * @return self
     */
    public function setToTs($to_ts)
    {
        if (is_null($to_ts)) {
            throw new \InvalidArgumentException('non-nullable to_ts cannot be null');
        }
        $this->container['to_ts'] = $to_ts;

        return $this;
    }

    /**
     * Gets total_listen_count
     *
     * @return int
     */
    public function getTotalListenCount()
    {
        return $this->container['total_listen_count'];
    }

    /**
     * Sets total_listen_count
     *
     * @param int $total_listen_count total_listen_count
     *
     * @return self
     */
    public function setTotalListenCount($total_listen_count)
    {
        if (is_null($total_listen_count)) {
            throw new \InvalidArgumentException('non-nullable total_listen_count cannot be null');
        }
        $this->container['total_listen_count'] = $total_listen_count;

        return $this;
    }

    /**
     * Gets total_user_count
     *
     * @return int
     */
    public function getTotalUserCount()
    {
        return $this->container['total_user_count'];
    }

    /**
     * Sets total_user_count
     *
     * @param int $total_user_count total_user_count
     *
     * @return self
     */
    public function setTotalUserCount($total_user_count)
    {
        if (is_null($total_user_count)) {
            throw new \InvalidArgumentException('non-nullable total_user_count cannot be null');
        }
        $this->container['total_user_count'] = $total_user_count;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


