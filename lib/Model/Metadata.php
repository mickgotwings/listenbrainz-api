<?php
/**
 * Metadata
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  Listenbrainz
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ListenBrainz Swagger - OpenAPI 3.0
 *
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Listenbrainz\Model;

use \ArrayAccess;
use \Listenbrainz\ObjectSerializer;

/**
 * Metadata Class Doc Comment
 *
 * @category Class
 * @package  Listenbrainz
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class Metadata implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'metadata';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'created' => 'int',
        'relationship_type' => 'string',
        'message' => 'string',
        'blurb_content' => 'string',
        'inserted_at' => 'int',
        'listened_at' => 'int',
        'listened_at_iso' => 'string',
        'playing_now' => 'bool',
        'track_metadata' => '\Listenbrainz\Model\TrackMetadata',
        'user_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'created' => null,
        'relationship_type' => null,
        'message' => null,
        'blurb_content' => null,
        'inserted_at' => null,
        'listened_at' => null,
        'listened_at_iso' => null,
        'playing_now' => null,
        'track_metadata' => null,
        'user_name' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'created' => false,
        'relationship_type' => false,
        'message' => false,
        'blurb_content' => false,
        'inserted_at' => false,
        'listened_at' => false,
        'listened_at_iso' => false,
        'playing_now' => false,
        'track_metadata' => false,
        'user_name' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created' => 'created',
        'relationship_type' => 'relationship_type',
        'message' => 'message',
        'blurb_content' => 'blurb_content',
        'inserted_at' => 'inserted_at',
        'listened_at' => 'listened_at',
        'listened_at_iso' => 'listened_at_iso',
        'playing_now' => 'playing_now',
        'track_metadata' => 'track_metadata',
        'user_name' => 'user_name'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created' => 'setCreated',
        'relationship_type' => 'setRelationshipType',
        'message' => 'setMessage',
        'blurb_content' => 'setBlurbContent',
        'inserted_at' => 'setInsertedAt',
        'listened_at' => 'setListenedAt',
        'listened_at_iso' => 'setListenedAtIso',
        'playing_now' => 'setPlayingNow',
        'track_metadata' => 'setTrackMetadata',
        'user_name' => 'setUserName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created' => 'getCreated',
        'relationship_type' => 'getRelationshipType',
        'message' => 'getMessage',
        'blurb_content' => 'getBlurbContent',
        'inserted_at' => 'getInsertedAt',
        'listened_at' => 'getListenedAt',
        'listened_at_iso' => 'getListenedAtIso',
        'playing_now' => 'getPlayingNow',
        'track_metadata' => 'getTrackMetadata',
        'user_name' => 'getUserName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('created', $data ?? [], null);
        $this->setIfExists('relationship_type', $data ?? [], null);
        $this->setIfExists('message', $data ?? [], null);
        $this->setIfExists('blurb_content', $data ?? [], null);
        $this->setIfExists('inserted_at', $data ?? [], null);
        $this->setIfExists('listened_at', $data ?? [], null);
        $this->setIfExists('listened_at_iso', $data ?? [], null);
        $this->setIfExists('playing_now', $data ?? [], null);
        $this->setIfExists('track_metadata', $data ?? [], null);
        $this->setIfExists('user_name', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created
     *
     * @return int|null
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param int|null $created created
     *
     * @return self
     */
    public function setCreated($created)
    {
        if (is_null($created)) {
            throw new \InvalidArgumentException('non-nullable created cannot be null');
        }
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets relationship_type
     *
     * @return string|null
     */
    public function getRelationshipType()
    {
        return $this->container['relationship_type'];
    }

    /**
     * Sets relationship_type
     *
     * @param string|null $relationship_type relationship_type
     *
     * @return self
     */
    public function setRelationshipType($relationship_type)
    {
        if (is_null($relationship_type)) {
            throw new \InvalidArgumentException('non-nullable relationship_type cannot be null');
        }
        $this->container['relationship_type'] = $relationship_type;

        return $this;
    }

    /**
     * Gets message
     *
     * @return string|null
     */
    public function getMessage()
    {
        return $this->container['message'];
    }

    /**
     * Sets message
     *
     * @param string|null $message message
     *
     * @return self
     */
    public function setMessage($message)
    {
        if (is_null($message)) {
            throw new \InvalidArgumentException('non-nullable message cannot be null');
        }
        $this->container['message'] = $message;

        return $this;
    }

    /**
     * Gets blurb_content
     *
     * @return string|null
     */
    public function getBlurbContent()
    {
        return $this->container['blurb_content'];
    }

    /**
     * Sets blurb_content
     *
     * @param string|null $blurb_content blurb_content
     *
     * @return self
     */
    public function setBlurbContent($blurb_content)
    {
        if (is_null($blurb_content)) {
            throw new \InvalidArgumentException('non-nullable blurb_content cannot be null');
        }
        $this->container['blurb_content'] = $blurb_content;

        return $this;
    }

    /**
     * Gets inserted_at
     *
     * @return int|null
     */
    public function getInsertedAt()
    {
        return $this->container['inserted_at'];
    }

    /**
     * Sets inserted_at
     *
     * @param int|null $inserted_at inserted_at
     *
     * @return self
     */
    public function setInsertedAt($inserted_at)
    {
        if (is_null($inserted_at)) {
            throw new \InvalidArgumentException('non-nullable inserted_at cannot be null');
        }
        $this->container['inserted_at'] = $inserted_at;

        return $this;
    }

    /**
     * Gets listened_at
     *
     * @return int|null
     */
    public function getListenedAt()
    {
        return $this->container['listened_at'];
    }

    /**
     * Sets listened_at
     *
     * @param int|null $listened_at listened_at
     *
     * @return self
     */
    public function setListenedAt($listened_at)
    {
        if (is_null($listened_at)) {
            throw new \InvalidArgumentException('non-nullable listened_at cannot be null');
        }
        $this->container['listened_at'] = $listened_at;

        return $this;
    }

    /**
     * Gets listened_at_iso
     *
     * @return string|null
     */
    public function getListenedAtIso()
    {
        return $this->container['listened_at_iso'];
    }

    /**
     * Sets listened_at_iso
     *
     * @param string|null $listened_at_iso listened_at_iso
     *
     * @return self
     */
    public function setListenedAtIso($listened_at_iso)
    {
        if (is_null($listened_at_iso)) {
            throw new \InvalidArgumentException('non-nullable listened_at_iso cannot be null');
        }
        $this->container['listened_at_iso'] = $listened_at_iso;

        return $this;
    }

    /**
     * Gets playing_now
     *
     * @return bool|null
     */
    public function getPlayingNow()
    {
        return $this->container['playing_now'];
    }

    /**
     * Sets playing_now
     *
     * @param bool|null $playing_now playing_now
     *
     * @return self
     */
    public function setPlayingNow($playing_now)
    {
        if (is_null($playing_now)) {
            throw new \InvalidArgumentException('non-nullable playing_now cannot be null');
        }
        $this->container['playing_now'] = $playing_now;

        return $this;
    }

    /**
     * Gets track_metadata
     *
     * @return \Listenbrainz\Model\TrackMetadata|null
     */
    public function getTrackMetadata()
    {
        return $this->container['track_metadata'];
    }

    /**
     * Sets track_metadata
     *
     * @param \Listenbrainz\Model\TrackMetadata|null $track_metadata track_metadata
     *
     * @return self
     */
    public function setTrackMetadata($track_metadata)
    {
        if (is_null($track_metadata)) {
            throw new \InvalidArgumentException('non-nullable track_metadata cannot be null');
        }
        $this->container['track_metadata'] = $track_metadata;

        return $this;
    }

    /**
     * Gets user_name
     *
     * @return string|null
     */
    public function getUserName()
    {
        return $this->container['user_name'];
    }

    /**
     * Sets user_name
     *
     * @param string|null $user_name user_name
     *
     * @return self
     */
    public function setUserName($user_name)
    {
        if (is_null($user_name)) {
            throw new \InvalidArgumentException('non-nullable user_name cannot be null');
        }
        $this->container['user_name'] = $user_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
