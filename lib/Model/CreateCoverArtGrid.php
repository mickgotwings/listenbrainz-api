<?php
/**
 * CreateCoverArtGrid
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ListenBrainz Swagger - OpenAPI 3.0
 *
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Listenbrainz\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * CreateCoverArtGrid Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class CreateCoverArtGrid implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'createCoverArtGrid';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'background' => 'string',
        'image_size' => 'int',
        'dimension' => 'int',
        'skip_missing' => 'bool',
        'show_caa' => 'bool',
        'tiles' => 'string[]',
        'release_mbids' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'background' => null,
        'image_size' => null,
        'dimension' => null,
        'skip_missing' => null,
        'show_caa' => null,
        'tiles' => null,
        'release_mbids' => 'uuid'
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'background' => false,
        'image_size' => false,
        'dimension' => false,
        'skip_missing' => false,
        'show_caa' => false,
        'tiles' => false,
        'release_mbids' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'background' => 'background',
        'image_size' => 'image_size',
        'dimension' => 'dimension',
        'skip_missing' => 'skip-missing',
        'show_caa' => 'show-caa',
        'tiles' => 'tiles',
        'release_mbids' => 'release_mbids'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'background' => 'setBackground',
        'image_size' => 'setImageSize',
        'dimension' => 'setDimension',
        'skip_missing' => 'setSkipMissing',
        'show_caa' => 'setShowCaa',
        'tiles' => 'setTiles',
        'release_mbids' => 'setReleaseMbids'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'background' => 'getBackground',
        'image_size' => 'getImageSize',
        'dimension' => 'getDimension',
        'skip_missing' => 'getSkipMissing',
        'show_caa' => 'getShowCaa',
        'tiles' => 'getTiles',
        'release_mbids' => 'getReleaseMbids'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    public const BACKGROUND_TRANSPARENT = 'transparent';
    public const BACKGROUND_WHITE = 'white';
    public const BACKGROUND_BLACK = 'black';

    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getBackgroundAllowableValues()
    {
        return [
            self::BACKGROUND_TRANSPARENT,
            self::BACKGROUND_WHITE,
            self::BACKGROUND_BLACK,
        ];
    }

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('background', $data ?? [], null);
        $this->setIfExists('image_size', $data ?? [], null);
        $this->setIfExists('dimension', $data ?? [], null);
        $this->setIfExists('skip_missing', $data ?? [], null);
        $this->setIfExists('show_caa', $data ?? [], null);
        $this->setIfExists('tiles', $data ?? [], null);
        $this->setIfExists('release_mbids', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['background'] === null) {
            $invalidProperties[] = "'background' can't be null";
        }
        $allowedValues = $this->getBackgroundAllowableValues();
        if (!is_null($this->container['background']) && !in_array($this->container['background'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value '%s' for 'background', must be one of '%s'",
                $this->container['background'],
                implode("', '", $allowedValues)
            );
        }

        if ($this->container['image_size'] === null) {
            $invalidProperties[] = "'image_size' can't be null";
        }
        if ($this->container['dimension'] === null) {
            $invalidProperties[] = "'dimension' can't be null";
        }
        if ($this->container['skip_missing'] === null) {
            $invalidProperties[] = "'skip_missing' can't be null";
        }
        if ($this->container['show_caa'] === null) {
            $invalidProperties[] = "'show_caa' can't be null";
        }
        if ($this->container['tiles'] === null) {
            $invalidProperties[] = "'tiles' can't be null";
        }
        if ($this->container['release_mbids'] === null) {
            $invalidProperties[] = "'release_mbids' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets background
     *
     * @return string
     */
    public function getBackground()
    {
        return $this->container['background'];
    }

    /**
     * Sets background
     *
     * @param string $background The background for the cover art.
     *
     * @return self
     */
    public function setBackground($background)
    {
        if (is_null($background)) {
            throw new \InvalidArgumentException('non-nullable background cannot be null');
        }
        $allowedValues = $this->getBackgroundAllowableValues();
        if (!in_array($background, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value '%s' for 'background', must be one of '%s'",
                    $background,
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['background'] = $background;

        return $this;
    }

    /**
     * Gets image_size
     *
     * @return int
     */
    public function getImageSize()
    {
        return $this->container['image_size'];
    }

    /**
     * Sets image_size
     *
     * @param int $image_size The size of the cover art image.
     *
     * @return self
     */
    public function setImageSize($image_size)
    {
        if (is_null($image_size)) {
            throw new \InvalidArgumentException('non-nullable image_size cannot be null');
        }
        $this->container['image_size'] = $image_size;

        return $this;
    }

    /**
     * Gets dimension
     *
     * @return int
     */
    public function getDimension()
    {
        return $this->container['dimension'];
    }

    /**
     * Sets dimension
     *
     * @param int $dimension The dimension to use for this grid. A grid of dimension 3 has 3 images across and 3 images down, for a total of 9 images.
     *
     * @return self
     */
    public function setDimension($dimension)
    {
        if (is_null($dimension)) {
            throw new \InvalidArgumentException('non-nullable dimension cannot be null');
        }
        $this->container['dimension'] = $dimension;

        return $this;
    }

    /**
     * Gets skip_missing
     *
     * @return bool
     */
    public function getSkipMissing()
    {
        return $this->container['skip_missing'];
    }

    /**
     * Sets skip_missing
     *
     * @param bool $skip_missing If cover art is missing for a given release_mbid, skip it and move on to the next one, if true is passed. If false, the show-caa option will decide what happens.
     *
     * @return self
     */
    public function setSkipMissing($skip_missing)
    {
        if (is_null($skip_missing)) {
            throw new \InvalidArgumentException('non-nullable skip_missing cannot be null');
        }
        $this->container['skip_missing'] = $skip_missing;

        return $this;
    }

    /**
     * Gets show_caa
     *
     * @return bool
     */
    public function getShowCaa()
    {
        return $this->container['show_caa'];
    }

    /**
     * Sets show_caa
     *
     * @param bool $show_caa If cover art is missing and skip-missing is false, then show-caa will determine if a blank square is shown or if the Cover Art Archive missing image is shown.
     *
     * @return self
     */
    public function setShowCaa($show_caa)
    {
        if (is_null($show_caa)) {
            throw new \InvalidArgumentException('non-nullable show_caa cannot be null');
        }
        $this->container['show_caa'] = $show_caa;

        return $this;
    }

    /**
     * Gets tiles
     *
     * @return string[]
     */
    public function getTiles()
    {
        return $this->container['tiles'];
    }

    /**
     * Sets tiles
     *
     * @param string[] $tiles The tiles paramater is a list of strings that determines the location where cover art images should be placed. Each string is a comma separated list of image cells. A grid of dimension 3 has 9 cells, from 0 in the upper left hand corner, 2 in the upper right hand corner, 6 in the lower left corner and 8 in the lower right corner. Specifying only a single cell will have the image cover that cell exactly. If more than one cell is specified, the image will cover the area defined by the bounding box of all the given cells. These tiles only define bounding box areas - no clipping of images that may fall outside of these tiles will be performed.
     *
     * @return self
     */
    public function setTiles($tiles)
    {
        if (is_null($tiles)) {
            throw new \InvalidArgumentException('non-nullable tiles cannot be null');
        }
        $this->container['tiles'] = $tiles;

        return $this;
    }

    /**
     * Gets release_mbids
     *
     * @return string[]
     */
    public function getReleaseMbids()
    {
        return $this->container['release_mbids'];
    }

    /**
     * Sets release_mbids
     *
     * @param string[] $release_mbids An ordered list of release_mbids. The images will be loaded and processed in the order that this list is in. The cover art for the release_mbids will be placed on the tiles defined by the tiles parameter.
     *
     * @return self
     */
    public function setReleaseMbids($release_mbids)
    {
        if (is_null($release_mbids)) {
            throw new \InvalidArgumentException('non-nullable release_mbids cannot be null');
        }
        $this->container['release_mbids'] = $release_mbids;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
