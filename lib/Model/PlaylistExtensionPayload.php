<?php
/**
 * PlaylistExtensionPayload
 *
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ListenBrainz Swagger - OpenAPI 3.0
 *
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Listenbrainz\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * PlaylistExtensionPayload Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 * @implements \ArrayAccess<string, mixed>
 */
class PlaylistExtensionPayload implements ModelInterface, ArrayAccess, \JsonSerializable
{
    public const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'playlistExtensionPayload';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'created_for' => 'string',
        'creator' => 'string',
        'collaborators' => 'string[]',
        'copied_from' => 'string',
        'copied_from_deleted' => 'bool',
        'public' => 'bool',
        'last_modified_at' => 'string',
        'additional_metadata' => '\OpenAPI\Client\Model\PlaylistExtensionPayloadAdditionalMetadata'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      * @phpstan-var array<string, string|null>
      * @psalm-var array<string, string|null>
      */
    protected static $openAPIFormats = [
        'created_for' => null,
        'creator' => null,
        'collaborators' => null,
        'copied_from' => null,
        'copied_from_deleted' => null,
        'public' => null,
        'last_modified_at' => null,
        'additional_metadata' => null
    ];

    /**
      * Array of nullable properties. Used for (de)serialization
      *
      * @var boolean[]
      */
    protected static array $openAPINullables = [
        'created_for' => false,
        'creator' => false,
        'collaborators' => false,
        'copied_from' => false,
        'copied_from_deleted' => false,
        'public' => false,
        'last_modified_at' => false,
        'additional_metadata' => false
    ];

    /**
      * If a nullable field gets set to null, insert it here
      *
      * @var boolean[]
      */
    protected array $openAPINullablesSetToNull = [];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of nullable properties
     *
     * @return array
     */
    protected static function openAPINullables(): array
    {
        return self::$openAPINullables;
    }

    /**
     * Array of nullable field names deliberately set to null
     *
     * @return boolean[]
     */
    private function getOpenAPINullablesSetToNull(): array
    {
        return $this->openAPINullablesSetToNull;
    }

    /**
     * Setter - Array of nullable field names deliberately set to null
     *
     * @param boolean[] $openAPINullablesSetToNull
     */
    private function setOpenAPINullablesSetToNull(array $openAPINullablesSetToNull): void
    {
        $this->openAPINullablesSetToNull = $openAPINullablesSetToNull;
    }

    /**
     * Checks if a property is nullable
     *
     * @param string $property
     * @return bool
     */
    public static function isNullable(string $property): bool
    {
        return self::openAPINullables()[$property] ?? false;
    }

    /**
     * Checks if a nullable property is set to null.
     *
     * @param string $property
     * @return bool
     */
    public function isNullableSetToNull(string $property): bool
    {
        return in_array($property, $this->getOpenAPINullablesSetToNull(), true);
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'created_for' => 'created_for',
        'creator' => 'creator',
        'collaborators' => 'collaborators',
        'copied_from' => 'copied_from',
        'copied_from_deleted' => 'copied_from_deleted',
        'public' => 'public',
        'last_modified_at' => 'last_modified_at',
        'additional_metadata' => 'additional_metadata'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'created_for' => 'setCreatedFor',
        'creator' => 'setCreator',
        'collaborators' => 'setCollaborators',
        'copied_from' => 'setCopiedFrom',
        'copied_from_deleted' => 'setCopiedFromDeleted',
        'public' => 'setPublic',
        'last_modified_at' => 'setLastModifiedAt',
        'additional_metadata' => 'setAdditionalMetadata'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'created_for' => 'getCreatedFor',
        'creator' => 'getCreator',
        'collaborators' => 'getCollaborators',
        'copied_from' => 'getCopiedFrom',
        'copied_from_deleted' => 'getCopiedFromDeleted',
        'public' => 'getPublic',
        'last_modified_at' => 'getLastModifiedAt',
        'additional_metadata' => 'getAdditionalMetadata'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }


    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[]|null $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(?array $data = null)
    {
        $this->setIfExists('created_for', $data ?? [], null);
        $this->setIfExists('creator', $data ?? [], null);
        $this->setIfExists('collaborators', $data ?? [], null);
        $this->setIfExists('copied_from', $data ?? [], null);
        $this->setIfExists('copied_from_deleted', $data ?? [], null);
        $this->setIfExists('public', $data ?? [], null);
        $this->setIfExists('last_modified_at', $data ?? [], null);
        $this->setIfExists('additional_metadata', $data ?? [], null);
    }

    /**
    * Sets $this->container[$variableName] to the given data or to the given default Value; if $variableName
    * is nullable and its value is set to null in the $fields array, then mark it as "set to null" in the
    * $this->openAPINullablesSetToNull array
    *
    * @param string $variableName
    * @param array  $fields
    * @param mixed  $defaultValue
    */
    private function setIfExists(string $variableName, array $fields, $defaultValue): void
    {
        if (self::isNullable($variableName) && array_key_exists($variableName, $fields) && is_null($fields[$variableName])) {
            $this->openAPINullablesSetToNull[] = $variableName;
        }

        $this->container[$variableName] = $fields[$variableName] ?? $defaultValue;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets created_for
     *
     * @return string|null
     */
    public function getCreatedFor()
    {
        return $this->container['created_for'];
    }

    /**
     * Sets created_for
     *
     * @param string|null $created_for created_for
     *
     * @return self
     */
    public function setCreatedFor($created_for)
    {
        if (is_null($created_for)) {
            throw new \InvalidArgumentException('non-nullable created_for cannot be null');
        }
        $this->container['created_for'] = $created_for;

        return $this;
    }

    /**
     * Gets creator
     *
     * @return string|null
     */
    public function getCreator()
    {
        return $this->container['creator'];
    }

    /**
     * Sets creator
     *
     * @param string|null $creator creator
     *
     * @return self
     */
    public function setCreator($creator)
    {
        if (is_null($creator)) {
            throw new \InvalidArgumentException('non-nullable creator cannot be null');
        }
        $this->container['creator'] = $creator;

        return $this;
    }

    /**
     * Gets collaborators
     *
     * @return string[]|null
     */
    public function getCollaborators()
    {
        return $this->container['collaborators'];
    }

    /**
     * Sets collaborators
     *
     * @param string[]|null $collaborators collaborators
     *
     * @return self
     */
    public function setCollaborators($collaborators)
    {
        if (is_null($collaborators)) {
            throw new \InvalidArgumentException('non-nullable collaborators cannot be null');
        }
        $this->container['collaborators'] = $collaborators;

        return $this;
    }

    /**
     * Gets copied_from
     *
     * @return string|null
     */
    public function getCopiedFrom()
    {
        return $this->container['copied_from'];
    }

    /**
     * Sets copied_from
     *
     * @param string|null $copied_from copied_from
     *
     * @return self
     */
    public function setCopiedFrom($copied_from)
    {
        if (is_null($copied_from)) {
            throw new \InvalidArgumentException('non-nullable copied_from cannot be null');
        }
        $this->container['copied_from'] = $copied_from;

        return $this;
    }

    /**
     * Gets copied_from_deleted
     *
     * @return bool|null
     */
    public function getCopiedFromDeleted()
    {
        return $this->container['copied_from_deleted'];
    }

    /**
     * Sets copied_from_deleted
     *
     * @param bool|null $copied_from_deleted copied_from_deleted
     *
     * @return self
     */
    public function setCopiedFromDeleted($copied_from_deleted)
    {
        if (is_null($copied_from_deleted)) {
            throw new \InvalidArgumentException('non-nullable copied_from_deleted cannot be null');
        }
        $this->container['copied_from_deleted'] = $copied_from_deleted;

        return $this;
    }

    /**
     * Gets public
     *
     * @return bool|null
     */
    public function getPublic()
    {
        return $this->container['public'];
    }

    /**
     * Sets public
     *
     * @param bool|null $public public
     *
     * @return self
     */
    public function setPublic($public)
    {
        if (is_null($public)) {
            throw new \InvalidArgumentException('non-nullable public cannot be null');
        }
        $this->container['public'] = $public;

        return $this;
    }

    /**
     * Gets last_modified_at
     *
     * @return string|null
     */
    public function getLastModifiedAt()
    {
        return $this->container['last_modified_at'];
    }

    /**
     * Sets last_modified_at
     *
     * @param string|null $last_modified_at last_modified_at
     *
     * @return self
     */
    public function setLastModifiedAt($last_modified_at)
    {
        if (is_null($last_modified_at)) {
            throw new \InvalidArgumentException('non-nullable last_modified_at cannot be null');
        }
        $this->container['last_modified_at'] = $last_modified_at;

        return $this;
    }

    /**
     * Gets additional_metadata
     *
     * @return \OpenAPI\Client\Model\PlaylistExtensionPayloadAdditionalMetadata|null
     */
    public function getAdditionalMetadata()
    {
        return $this->container['additional_metadata'];
    }

    /**
     * Sets additional_metadata
     *
     * @param \OpenAPI\Client\Model\PlaylistExtensionPayloadAdditionalMetadata|null $additional_metadata additional_metadata
     *
     * @return self
     */
    public function setAdditionalMetadata($additional_metadata)
    {
        if (is_null($additional_metadata)) {
            throw new \InvalidArgumentException('non-nullable additional_metadata cannot be null');
        }
        $this->container['additional_metadata'] = $additional_metadata;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset): bool
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed|null
     */
    #[\ReturnTypeWillChange]
    public function offsetGet($offset)
    {
        return $this->container[$offset] ?? null;
    }

    /**
     * Sets value based on offset.
     *
     * @param int|null $offset Offset
     * @param mixed    $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value): void
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset): void
    {
        unset($this->container[$offset]);
    }

    /**
     * Serializes the object to a value that can be serialized natively by json_encode().
     * @link https://www.php.net/manual/en/jsonserializable.jsonserialize.php
     *
     * @return mixed Returns data which can be serialized by json_encode(), which is a value
     * of any type other than a resource.
     */
    #[\ReturnTypeWillChange]
    public function jsonSerialize()
    {
       return ObjectSerializer::sanitizeForSerialization($this);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}
