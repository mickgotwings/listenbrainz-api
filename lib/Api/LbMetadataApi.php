<?php
/**
 * LbMetadataApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ListenBrainz Swagger - OpenAPI 3.0
 *
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Listenbrainz\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * LbMetadataApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LbMetadataApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'artistMetadata' => [
            'application/json',
        ],
        'getManualMapping' => [
            'application/json',
        ],
        'lookup' => [
            'application/json',
        ],
        'recordingMetadata' => [
            'application/json',
        ],
        'releaseGroupMetadata' => [
            'application/json',
        ],
        'submitManualMapping' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation artistMetadata
     *
     * This endpoint takes in a list of artist_mbids and returns an array of dicts that contain recording metadata suitable for showing in a context that requires as much detail about a recording and the artist. Using the inc parameter, you can control which portions of metadata to fetch.
     *
     * @param  string[] $artist_mbids A comma separated list of recording_mbids. (required)
     * @param  string $inc A space separated list of “artist”, “tag” and/or “release” to indicate which portions of metadata you&#39;re interested in fetching. We encourage users to only fetch the data they plan to consume. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['artistMetadata'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ArtistMetadata[]
     */
    public function artistMetadata($artist_mbids, $inc, string $contentType = self::contentTypes['artistMetadata'][0])
    {
        list($response) = $this->artistMetadataWithHttpInfo($artist_mbids, $inc, $contentType);
        return $response;
    }

    /**
     * Operation artistMetadataWithHttpInfo
     *
     * This endpoint takes in a list of artist_mbids and returns an array of dicts that contain recording metadata suitable for showing in a context that requires as much detail about a recording and the artist. Using the inc parameter, you can control which portions of metadata to fetch.
     *
     * @param  string[] $artist_mbids A comma separated list of recording_mbids. (required)
     * @param  string $inc A space separated list of “artist”, “tag” and/or “release” to indicate which portions of metadata you&#39;re interested in fetching. We encourage users to only fetch the data they plan to consume. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['artistMetadata'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ArtistMetadata[], HTTP status code, HTTP response headers (array of strings)
     */
    public function artistMetadataWithHttpInfo($artist_mbids, $inc, string $contentType = self::contentTypes['artistMetadata'][0])
    {
        $request = $this->artistMetadataRequest($artist_mbids, $inc, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ArtistMetadata[]' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ArtistMetadata[]' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ArtistMetadata[]', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ArtistMetadata[]';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ArtistMetadata[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation artistMetadataAsync
     *
     * This endpoint takes in a list of artist_mbids and returns an array of dicts that contain recording metadata suitable for showing in a context that requires as much detail about a recording and the artist. Using the inc parameter, you can control which portions of metadata to fetch.
     *
     * @param  string[] $artist_mbids A comma separated list of recording_mbids. (required)
     * @param  string $inc A space separated list of “artist”, “tag” and/or “release” to indicate which portions of metadata you&#39;re interested in fetching. We encourage users to only fetch the data they plan to consume. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['artistMetadata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function artistMetadataAsync($artist_mbids, $inc, string $contentType = self::contentTypes['artistMetadata'][0])
    {
        return $this->artistMetadataAsyncWithHttpInfo($artist_mbids, $inc, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation artistMetadataAsyncWithHttpInfo
     *
     * This endpoint takes in a list of artist_mbids and returns an array of dicts that contain recording metadata suitable for showing in a context that requires as much detail about a recording and the artist. Using the inc parameter, you can control which portions of metadata to fetch.
     *
     * @param  string[] $artist_mbids A comma separated list of recording_mbids. (required)
     * @param  string $inc A space separated list of “artist”, “tag” and/or “release” to indicate which portions of metadata you&#39;re interested in fetching. We encourage users to only fetch the data they plan to consume. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['artistMetadata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function artistMetadataAsyncWithHttpInfo($artist_mbids, $inc, string $contentType = self::contentTypes['artistMetadata'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ArtistMetadata[]';
        $request = $this->artistMetadataRequest($artist_mbids, $inc, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'artistMetadata'
     *
     * @param  string[] $artist_mbids A comma separated list of recording_mbids. (required)
     * @param  string $inc A space separated list of “artist”, “tag” and/or “release” to indicate which portions of metadata you&#39;re interested in fetching. We encourage users to only fetch the data they plan to consume. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['artistMetadata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function artistMetadataRequest($artist_mbids, $inc, string $contentType = self::contentTypes['artistMetadata'][0])
    {

        // verify the required parameter 'artist_mbids' is set
        if ($artist_mbids === null || (is_array($artist_mbids) && count($artist_mbids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $artist_mbids when calling artistMetadata'
            );
        }

        // verify the required parameter 'inc' is set
        if ($inc === null || (is_array($inc) && count($inc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inc when calling artistMetadata'
            );
        }


        $resourcePath = '/1/metadata/artist/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $artist_mbids,
            'artist_mbids', // param base name
            'array', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inc,
            'inc', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getManualMapping
     *
     * Get the manual mapping of a recording messybrainz ID that a user added.
     *
     * @param  string $recording_msid recording_msid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getManualMapping'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\GetManualMapping
     */
    public function getManualMapping($recording_msid, string $contentType = self::contentTypes['getManualMapping'][0])
    {
        list($response) = $this->getManualMappingWithHttpInfo($recording_msid, $contentType);
        return $response;
    }

    /**
     * Operation getManualMappingWithHttpInfo
     *
     * Get the manual mapping of a recording messybrainz ID that a user added.
     *
     * @param  string $recording_msid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getManualMapping'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\GetManualMapping, HTTP status code, HTTP response headers (array of strings)
     */
    public function getManualMappingWithHttpInfo($recording_msid, string $contentType = self::contentTypes['getManualMapping'][0])
    {
        $request = $this->getManualMappingRequest($recording_msid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\GetManualMapping' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\GetManualMapping' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\GetManualMapping', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\GetManualMapping';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\GetManualMapping',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getManualMappingAsync
     *
     * Get the manual mapping of a recording messybrainz ID that a user added.
     *
     * @param  string $recording_msid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getManualMapping'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getManualMappingAsync($recording_msid, string $contentType = self::contentTypes['getManualMapping'][0])
    {
        return $this->getManualMappingAsyncWithHttpInfo($recording_msid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getManualMappingAsyncWithHttpInfo
     *
     * Get the manual mapping of a recording messybrainz ID that a user added.
     *
     * @param  string $recording_msid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getManualMapping'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getManualMappingAsyncWithHttpInfo($recording_msid, string $contentType = self::contentTypes['getManualMapping'][0])
    {
        $returnType = '\OpenAPI\Client\Model\GetManualMapping';
        $request = $this->getManualMappingRequest($recording_msid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getManualMapping'
     *
     * @param  string $recording_msid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['getManualMapping'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function getManualMappingRequest($recording_msid, string $contentType = self::contentTypes['getManualMapping'][0])
    {

        // verify the required parameter 'recording_msid' is set
        if ($recording_msid === null || (is_array($recording_msid) && count($recording_msid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recording_msid when calling getManualMapping'
            );
        }


        $resourcePath = '/1/metadata/get_manual_mapping/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recording_msid,
            'recording_msid', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation lookup
     *
     * This endpoint looks up mbid metadata for the given artist, recording and optionally a release name. The total number of characters in the artist name, recording name and release name query arguments should be less than or equal to MAX_MAPPING_QUERY_LENGTH.
     *
     * @param  string $artist_name Artist name of the listen. (required)
     * @param  string $recording_name Track name of the listen. (required)
     * @param  bool $metadata Should extra metadata be also returned if a match is found, see /metadata/recording for details. (required)
     * @param  string $inc A space separated list of “artist”, “tag” and/or “release” to indicate which portions of metadata you&#39;re interested in fetching. We encourage users to only fetch the data they plan to consume. (required)
     * @param  string|null $release_name Release name of the listen. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lookup'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Lookup
     */
    public function lookup($artist_name, $recording_name, $metadata, $inc, $release_name = null, string $contentType = self::contentTypes['lookup'][0])
    {
        list($response) = $this->lookupWithHttpInfo($artist_name, $recording_name, $metadata, $inc, $release_name, $contentType);
        return $response;
    }

    /**
     * Operation lookupWithHttpInfo
     *
     * This endpoint looks up mbid metadata for the given artist, recording and optionally a release name. The total number of characters in the artist name, recording name and release name query arguments should be less than or equal to MAX_MAPPING_QUERY_LENGTH.
     *
     * @param  string $artist_name Artist name of the listen. (required)
     * @param  string $recording_name Track name of the listen. (required)
     * @param  bool $metadata Should extra metadata be also returned if a match is found, see /metadata/recording for details. (required)
     * @param  string $inc A space separated list of “artist”, “tag” and/or “release” to indicate which portions of metadata you&#39;re interested in fetching. We encourage users to only fetch the data they plan to consume. (required)
     * @param  string|null $release_name Release name of the listen. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lookup'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Lookup, HTTP status code, HTTP response headers (array of strings)
     */
    public function lookupWithHttpInfo($artist_name, $recording_name, $metadata, $inc, $release_name = null, string $contentType = self::contentTypes['lookup'][0])
    {
        $request = $this->lookupRequest($artist_name, $recording_name, $metadata, $inc, $release_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Lookup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Lookup' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Lookup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\Lookup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Lookup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation lookupAsync
     *
     * This endpoint looks up mbid metadata for the given artist, recording and optionally a release name. The total number of characters in the artist name, recording name and release name query arguments should be less than or equal to MAX_MAPPING_QUERY_LENGTH.
     *
     * @param  string $artist_name Artist name of the listen. (required)
     * @param  string $recording_name Track name of the listen. (required)
     * @param  bool $metadata Should extra metadata be also returned if a match is found, see /metadata/recording for details. (required)
     * @param  string $inc A space separated list of “artist”, “tag” and/or “release” to indicate which portions of metadata you&#39;re interested in fetching. We encourage users to only fetch the data they plan to consume. (required)
     * @param  string|null $release_name Release name of the listen. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lookup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function lookupAsync($artist_name, $recording_name, $metadata, $inc, $release_name = null, string $contentType = self::contentTypes['lookup'][0])
    {
        return $this->lookupAsyncWithHttpInfo($artist_name, $recording_name, $metadata, $inc, $release_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation lookupAsyncWithHttpInfo
     *
     * This endpoint looks up mbid metadata for the given artist, recording and optionally a release name. The total number of characters in the artist name, recording name and release name query arguments should be less than or equal to MAX_MAPPING_QUERY_LENGTH.
     *
     * @param  string $artist_name Artist name of the listen. (required)
     * @param  string $recording_name Track name of the listen. (required)
     * @param  bool $metadata Should extra metadata be also returned if a match is found, see /metadata/recording for details. (required)
     * @param  string $inc A space separated list of “artist”, “tag” and/or “release” to indicate which portions of metadata you&#39;re interested in fetching. We encourage users to only fetch the data they plan to consume. (required)
     * @param  string|null $release_name Release name of the listen. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lookup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function lookupAsyncWithHttpInfo($artist_name, $recording_name, $metadata, $inc, $release_name = null, string $contentType = self::contentTypes['lookup'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Lookup';
        $request = $this->lookupRequest($artist_name, $recording_name, $metadata, $inc, $release_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'lookup'
     *
     * @param  string $artist_name Artist name of the listen. (required)
     * @param  string $recording_name Track name of the listen. (required)
     * @param  bool $metadata Should extra metadata be also returned if a match is found, see /metadata/recording for details. (required)
     * @param  string $inc A space separated list of “artist”, “tag” and/or “release” to indicate which portions of metadata you&#39;re interested in fetching. We encourage users to only fetch the data they plan to consume. (required)
     * @param  string|null $release_name Release name of the listen. (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['lookup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function lookupRequest($artist_name, $recording_name, $metadata, $inc, $release_name = null, string $contentType = self::contentTypes['lookup'][0])
    {

        // verify the required parameter 'artist_name' is set
        if ($artist_name === null || (is_array($artist_name) && count($artist_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $artist_name when calling lookup'
            );
        }

        // verify the required parameter 'recording_name' is set
        if ($recording_name === null || (is_array($recording_name) && count($recording_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recording_name when calling lookup'
            );
        }

        // verify the required parameter 'metadata' is set
        if ($metadata === null || (is_array($metadata) && count($metadata) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $metadata when calling lookup'
            );
        }

        // verify the required parameter 'inc' is set
        if ($inc === null || (is_array($inc) && count($inc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inc when calling lookup'
            );
        }



        $resourcePath = '/1/metadata/lookup/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $artist_name,
            'artist_name', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recording_name,
            'recording_name', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $release_name,
            'release_name', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $metadata,
            'metadata', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inc,
            'inc', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recordingMetadata
     *
     * This endpoint takes in a list of recording_mbids and returns an array of dicts that contain recording metadata suitable for showing in a context that requires as much detail about a recording and the artist. Using the inc parameter, you can control which portions of metadata to fetch.
     *
     * @param  string[] $recording_mbids A comma separated list of recording_mbids. (required)
     * @param  string $inc A space separated list of “artist”, “tag” and/or “release” to indicate which portions of metadata you&#39;re interested in fetching. We encourage users to only fetch the data they plan to consume. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recordingMetadata'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,\OpenAPI\Client\Model\RecordingMetadata>
     */
    public function recordingMetadata($recording_mbids, $inc, string $contentType = self::contentTypes['recordingMetadata'][0])
    {
        list($response) = $this->recordingMetadataWithHttpInfo($recording_mbids, $inc, $contentType);
        return $response;
    }

    /**
     * Operation recordingMetadataWithHttpInfo
     *
     * This endpoint takes in a list of recording_mbids and returns an array of dicts that contain recording metadata suitable for showing in a context that requires as much detail about a recording and the artist. Using the inc parameter, you can control which portions of metadata to fetch.
     *
     * @param  string[] $recording_mbids A comma separated list of recording_mbids. (required)
     * @param  string $inc A space separated list of “artist”, “tag” and/or “release” to indicate which portions of metadata you&#39;re interested in fetching. We encourage users to only fetch the data they plan to consume. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recordingMetadata'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,\OpenAPI\Client\Model\RecordingMetadata>, HTTP status code, HTTP response headers (array of strings)
     */
    public function recordingMetadataWithHttpInfo($recording_mbids, $inc, string $contentType = self::contentTypes['recordingMetadata'][0])
    {
        $request = $this->recordingMetadataRequest($recording_mbids, $inc, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('array<string,\OpenAPI\Client\Model\RecordingMetadata>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,\OpenAPI\Client\Model\RecordingMetadata>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,\OpenAPI\Client\Model\RecordingMetadata>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'array<string,\OpenAPI\Client\Model\RecordingMetadata>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,\OpenAPI\Client\Model\RecordingMetadata>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recordingMetadataAsync
     *
     * This endpoint takes in a list of recording_mbids and returns an array of dicts that contain recording metadata suitable for showing in a context that requires as much detail about a recording and the artist. Using the inc parameter, you can control which portions of metadata to fetch.
     *
     * @param  string[] $recording_mbids A comma separated list of recording_mbids. (required)
     * @param  string $inc A space separated list of “artist”, “tag” and/or “release” to indicate which portions of metadata you&#39;re interested in fetching. We encourage users to only fetch the data they plan to consume. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recordingMetadata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recordingMetadataAsync($recording_mbids, $inc, string $contentType = self::contentTypes['recordingMetadata'][0])
    {
        return $this->recordingMetadataAsyncWithHttpInfo($recording_mbids, $inc, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recordingMetadataAsyncWithHttpInfo
     *
     * This endpoint takes in a list of recording_mbids and returns an array of dicts that contain recording metadata suitable for showing in a context that requires as much detail about a recording and the artist. Using the inc parameter, you can control which portions of metadata to fetch.
     *
     * @param  string[] $recording_mbids A comma separated list of recording_mbids. (required)
     * @param  string $inc A space separated list of “artist”, “tag” and/or “release” to indicate which portions of metadata you&#39;re interested in fetching. We encourage users to only fetch the data they plan to consume. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recordingMetadata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recordingMetadataAsyncWithHttpInfo($recording_mbids, $inc, string $contentType = self::contentTypes['recordingMetadata'][0])
    {
        $returnType = 'array<string,\OpenAPI\Client\Model\RecordingMetadata>';
        $request = $this->recordingMetadataRequest($recording_mbids, $inc, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recordingMetadata'
     *
     * @param  string[] $recording_mbids A comma separated list of recording_mbids. (required)
     * @param  string $inc A space separated list of “artist”, “tag” and/or “release” to indicate which portions of metadata you&#39;re interested in fetching. We encourage users to only fetch the data they plan to consume. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recordingMetadata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recordingMetadataRequest($recording_mbids, $inc, string $contentType = self::contentTypes['recordingMetadata'][0])
    {

        // verify the required parameter 'recording_mbids' is set
        if ($recording_mbids === null || (is_array($recording_mbids) && count($recording_mbids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recording_mbids when calling recordingMetadata'
            );
        }

        // verify the required parameter 'inc' is set
        if ($inc === null || (is_array($inc) && count($inc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inc when calling recordingMetadata'
            );
        }


        $resourcePath = '/1/metadata/recording/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $recording_mbids,
            'recording_mbids', // param base name
            'array', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inc,
            'inc', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation releaseGroupMetadata
     *
     * This endpoint takes in a list of release_group_mbids and returns an array of dicts that contain release_group metadata suitable for showing in a context that requires as much detail about a release_group and the artist. Using the inc parameter, you can control which portions of metadata to fetch.
     *
     * @param  string[] $release_group_mbids A comma separated list of release_group_mbids. (required)
     * @param  string $inc A space separated list of “artist”, “tag” and/or “release” to indicate which portions of metadata you&#39;re interested in fetching. We encourage users to only fetch the data they plan to consume. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['releaseGroupMetadata'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array<string,\OpenAPI\Client\Model\ReleaseGroupMetadata>
     */
    public function releaseGroupMetadata($release_group_mbids, $inc, string $contentType = self::contentTypes['releaseGroupMetadata'][0])
    {
        list($response) = $this->releaseGroupMetadataWithHttpInfo($release_group_mbids, $inc, $contentType);
        return $response;
    }

    /**
     * Operation releaseGroupMetadataWithHttpInfo
     *
     * This endpoint takes in a list of release_group_mbids and returns an array of dicts that contain release_group metadata suitable for showing in a context that requires as much detail about a release_group and the artist. Using the inc parameter, you can control which portions of metadata to fetch.
     *
     * @param  string[] $release_group_mbids A comma separated list of release_group_mbids. (required)
     * @param  string $inc A space separated list of “artist”, “tag” and/or “release” to indicate which portions of metadata you&#39;re interested in fetching. We encourage users to only fetch the data they plan to consume. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['releaseGroupMetadata'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of array<string,\OpenAPI\Client\Model\ReleaseGroupMetadata>, HTTP status code, HTTP response headers (array of strings)
     */
    public function releaseGroupMetadataWithHttpInfo($release_group_mbids, $inc, string $contentType = self::contentTypes['releaseGroupMetadata'][0])
    {
        $request = $this->releaseGroupMetadataRequest($release_group_mbids, $inc, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('array<string,\OpenAPI\Client\Model\ReleaseGroupMetadata>' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('array<string,\OpenAPI\Client\Model\ReleaseGroupMetadata>' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'array<string,\OpenAPI\Client\Model\ReleaseGroupMetadata>', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = 'array<string,\OpenAPI\Client\Model\ReleaseGroupMetadata>';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'array<string,\OpenAPI\Client\Model\ReleaseGroupMetadata>',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation releaseGroupMetadataAsync
     *
     * This endpoint takes in a list of release_group_mbids and returns an array of dicts that contain release_group metadata suitable for showing in a context that requires as much detail about a release_group and the artist. Using the inc parameter, you can control which portions of metadata to fetch.
     *
     * @param  string[] $release_group_mbids A comma separated list of release_group_mbids. (required)
     * @param  string $inc A space separated list of “artist”, “tag” and/or “release” to indicate which portions of metadata you&#39;re interested in fetching. We encourage users to only fetch the data they plan to consume. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['releaseGroupMetadata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function releaseGroupMetadataAsync($release_group_mbids, $inc, string $contentType = self::contentTypes['releaseGroupMetadata'][0])
    {
        return $this->releaseGroupMetadataAsyncWithHttpInfo($release_group_mbids, $inc, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation releaseGroupMetadataAsyncWithHttpInfo
     *
     * This endpoint takes in a list of release_group_mbids and returns an array of dicts that contain release_group metadata suitable for showing in a context that requires as much detail about a release_group and the artist. Using the inc parameter, you can control which portions of metadata to fetch.
     *
     * @param  string[] $release_group_mbids A comma separated list of release_group_mbids. (required)
     * @param  string $inc A space separated list of “artist”, “tag” and/or “release” to indicate which portions of metadata you&#39;re interested in fetching. We encourage users to only fetch the data they plan to consume. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['releaseGroupMetadata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function releaseGroupMetadataAsyncWithHttpInfo($release_group_mbids, $inc, string $contentType = self::contentTypes['releaseGroupMetadata'][0])
    {
        $returnType = 'array<string,\OpenAPI\Client\Model\ReleaseGroupMetadata>';
        $request = $this->releaseGroupMetadataRequest($release_group_mbids, $inc, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'releaseGroupMetadata'
     *
     * @param  string[] $release_group_mbids A comma separated list of release_group_mbids. (required)
     * @param  string $inc A space separated list of “artist”, “tag” and/or “release” to indicate which portions of metadata you&#39;re interested in fetching. We encourage users to only fetch the data they plan to consume. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['releaseGroupMetadata'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function releaseGroupMetadataRequest($release_group_mbids, $inc, string $contentType = self::contentTypes['releaseGroupMetadata'][0])
    {

        // verify the required parameter 'release_group_mbids' is set
        if ($release_group_mbids === null || (is_array($release_group_mbids) && count($release_group_mbids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $release_group_mbids when calling releaseGroupMetadata'
            );
        }

        // verify the required parameter 'inc' is set
        if ($inc === null || (is_array($inc) && count($inc) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $inc when calling releaseGroupMetadata'
            );
        }


        $resourcePath = '/1/metadata/release_group/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $release_group_mbids,
            'release_group_mbids', // param base name
            'array', // openApiType
            'form', // style
            false, // explode
            true // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $inc,
            'inc', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation submitManualMapping
     *
     * Submit a manual mapping of a recording messybrainz ID to a musicbrainz recording id.
     *
     * @param  \OpenAPI\Client\Model\SubmitManualMapping $submit_manual_mapping submit_manual_mapping (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitManualMapping'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function submitManualMapping($submit_manual_mapping, string $contentType = self::contentTypes['submitManualMapping'][0])
    {
        $this->submitManualMappingWithHttpInfo($submit_manual_mapping, $contentType);
    }

    /**
     * Operation submitManualMappingWithHttpInfo
     *
     * Submit a manual mapping of a recording messybrainz ID to a musicbrainz recording id.
     *
     * @param  \OpenAPI\Client\Model\SubmitManualMapping $submit_manual_mapping (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitManualMapping'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function submitManualMappingWithHttpInfo($submit_manual_mapping, string $contentType = self::contentTypes['submitManualMapping'][0])
    {
        $request = $this->submitManualMappingRequest($submit_manual_mapping, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation submitManualMappingAsync
     *
     * Submit a manual mapping of a recording messybrainz ID to a musicbrainz recording id.
     *
     * @param  \OpenAPI\Client\Model\SubmitManualMapping $submit_manual_mapping (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitManualMapping'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitManualMappingAsync($submit_manual_mapping, string $contentType = self::contentTypes['submitManualMapping'][0])
    {
        return $this->submitManualMappingAsyncWithHttpInfo($submit_manual_mapping, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation submitManualMappingAsyncWithHttpInfo
     *
     * Submit a manual mapping of a recording messybrainz ID to a musicbrainz recording id.
     *
     * @param  \OpenAPI\Client\Model\SubmitManualMapping $submit_manual_mapping (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitManualMapping'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitManualMappingAsyncWithHttpInfo($submit_manual_mapping, string $contentType = self::contentTypes['submitManualMapping'][0])
    {
        $returnType = '';
        $request = $this->submitManualMappingRequest($submit_manual_mapping, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'submitManualMapping'
     *
     * @param  \OpenAPI\Client\Model\SubmitManualMapping $submit_manual_mapping (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitManualMapping'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function submitManualMappingRequest($submit_manual_mapping, string $contentType = self::contentTypes['submitManualMapping'][0])
    {

        // verify the required parameter 'submit_manual_mapping' is set
        if ($submit_manual_mapping === null || (is_array($submit_manual_mapping) && count($submit_manual_mapping) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $submit_manual_mapping when calling submitManualMapping'
            );
        }


        $resourcePath = '/1/metadata/submit_manual_mapping/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($submit_manual_mapping)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($submit_manual_mapping));
            } else {
                $httpBody = $submit_manual_mapping;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
