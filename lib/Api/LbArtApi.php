<?php
/**
 * LbArtApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Listenbrainz
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ListenBrainz Swagger - OpenAPI 3.0
 *
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Listenbrainz\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Listenbrainz\ApiException;
use Listenbrainz\Configuration;
use Listenbrainz\HeaderSelector;
use Listenbrainz\ObjectSerializer;

/**
 * LbArtApi Class Doc Comment
 *
 * @category Class
 * @package  Listenbrainz
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LbArtApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createCoverArtGrid' => [
            'application/json',
        ],
        'createCoverArtGridForUser' => [
            'application/json',
        ],
        'createCustomCoverArt' => [
            'application/json',
        ],
        'yearInMusic' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createCoverArtGrid
     *
     * Create a cover art grid SVG file from the POSTed JSON data to this endpoint.
     *
     * @param  \Listenbrainz\Model\CreateCoverArtGrid $create_cover_art_grid create_cover_art_grid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCoverArtGrid'] to see the possible values for this operation
     *
     * @throws \Listenbrainz\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function createCoverArtGrid($create_cover_art_grid, string $contentType = self::contentTypes['createCoverArtGrid'][0])
    {
        list($response) = $this->createCoverArtGridWithHttpInfo($create_cover_art_grid, $contentType);
        return $response;
    }

    /**
     * Operation createCoverArtGridWithHttpInfo
     *
     * Create a cover art grid SVG file from the POSTed JSON data to this endpoint.
     *
     * @param  \Listenbrainz\Model\CreateCoverArtGrid $create_cover_art_grid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCoverArtGrid'] to see the possible values for this operation
     *
     * @throws \Listenbrainz\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCoverArtGridWithHttpInfo($create_cover_art_grid, string $contentType = self::contentTypes['createCoverArtGrid'][0])
    {
        $request = $this->createCoverArtGridRequest($create_cover_art_grid, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCoverArtGridAsync
     *
     * Create a cover art grid SVG file from the POSTed JSON data to this endpoint.
     *
     * @param  \Listenbrainz\Model\CreateCoverArtGrid $create_cover_art_grid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCoverArtGrid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCoverArtGridAsync($create_cover_art_grid, string $contentType = self::contentTypes['createCoverArtGrid'][0])
    {
        return $this->createCoverArtGridAsyncWithHttpInfo($create_cover_art_grid, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCoverArtGridAsyncWithHttpInfo
     *
     * Create a cover art grid SVG file from the POSTed JSON data to this endpoint.
     *
     * @param  \Listenbrainz\Model\CreateCoverArtGrid $create_cover_art_grid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCoverArtGrid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCoverArtGridAsyncWithHttpInfo($create_cover_art_grid, string $contentType = self::contentTypes['createCoverArtGrid'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->createCoverArtGridRequest($create_cover_art_grid, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCoverArtGrid'
     *
     * @param  \Listenbrainz\Model\CreateCoverArtGrid $create_cover_art_grid (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCoverArtGrid'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCoverArtGridRequest($create_cover_art_grid, string $contentType = self::contentTypes['createCoverArtGrid'][0])
    {

        // verify the required parameter 'create_cover_art_grid' is set
        if ($create_cover_art_grid === null || (is_array($create_cover_art_grid) && count($create_cover_art_grid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_cover_art_grid when calling createCoverArtGrid'
            );
        }


        $resourcePath = '/1/art/grid/';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            ['image/svg+xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_cover_art_grid)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_cover_art_grid));
            } else {
                $httpBody = $create_cover_art_grid;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCoverArtGridForUser
     *
     * Create a cover art grid SVG file from the stats of a given user.
     *
     * @param  string $user_name The name of the user for whom to create the cover art. (required)
     * @param  \Listenbrainz\Model\AllowedStatisticsRange $time_range Must be a statistics time range. (required)
     * @param  int $dimension The dimension to use for this grid. A grid of dimension 3 has 3 images across and 3 images down, for a total of 9 images. (required)
     * @param  int $layout The layout to be used for this grid. Layout 0 is always a simple grid, but other layouts may have image images be of different sizes. See https://art.listenbrainz.org for examples of the available layouts. (required)
     * @param  int $image_size The size of the cover art image. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCoverArtGridForUser'] to see the possible values for this operation
     *
     * @throws \Listenbrainz\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function createCoverArtGridForUser($user_name, $time_range, $dimension, $layout, $image_size, string $contentType = self::contentTypes['createCoverArtGridForUser'][0])
    {
        list($response) = $this->createCoverArtGridForUserWithHttpInfo($user_name, $time_range, $dimension, $layout, $image_size, $contentType);
        return $response;
    }

    /**
     * Operation createCoverArtGridForUserWithHttpInfo
     *
     * Create a cover art grid SVG file from the stats of a given user.
     *
     * @param  string $user_name The name of the user for whom to create the cover art. (required)
     * @param  \Listenbrainz\Model\AllowedStatisticsRange $time_range Must be a statistics time range. (required)
     * @param  int $dimension The dimension to use for this grid. A grid of dimension 3 has 3 images across and 3 images down, for a total of 9 images. (required)
     * @param  int $layout The layout to be used for this grid. Layout 0 is always a simple grid, but other layouts may have image images be of different sizes. See https://art.listenbrainz.org for examples of the available layouts. (required)
     * @param  int $image_size The size of the cover art image. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCoverArtGridForUser'] to see the possible values for this operation
     *
     * @throws \Listenbrainz\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCoverArtGridForUserWithHttpInfo($user_name, $time_range, $dimension, $layout, $image_size, string $contentType = self::contentTypes['createCoverArtGridForUser'][0])
    {
        $request = $this->createCoverArtGridForUserRequest($user_name, $time_range, $dimension, $layout, $image_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCoverArtGridForUserAsync
     *
     * Create a cover art grid SVG file from the stats of a given user.
     *
     * @param  string $user_name The name of the user for whom to create the cover art. (required)
     * @param  \Listenbrainz\Model\AllowedStatisticsRange $time_range Must be a statistics time range. (required)
     * @param  int $dimension The dimension to use for this grid. A grid of dimension 3 has 3 images across and 3 images down, for a total of 9 images. (required)
     * @param  int $layout The layout to be used for this grid. Layout 0 is always a simple grid, but other layouts may have image images be of different sizes. See https://art.listenbrainz.org for examples of the available layouts. (required)
     * @param  int $image_size The size of the cover art image. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCoverArtGridForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCoverArtGridForUserAsync($user_name, $time_range, $dimension, $layout, $image_size, string $contentType = self::contentTypes['createCoverArtGridForUser'][0])
    {
        return $this->createCoverArtGridForUserAsyncWithHttpInfo($user_name, $time_range, $dimension, $layout, $image_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCoverArtGridForUserAsyncWithHttpInfo
     *
     * Create a cover art grid SVG file from the stats of a given user.
     *
     * @param  string $user_name The name of the user for whom to create the cover art. (required)
     * @param  \Listenbrainz\Model\AllowedStatisticsRange $time_range Must be a statistics time range. (required)
     * @param  int $dimension The dimension to use for this grid. A grid of dimension 3 has 3 images across and 3 images down, for a total of 9 images. (required)
     * @param  int $layout The layout to be used for this grid. Layout 0 is always a simple grid, but other layouts may have image images be of different sizes. See https://art.listenbrainz.org for examples of the available layouts. (required)
     * @param  int $image_size The size of the cover art image. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCoverArtGridForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCoverArtGridForUserAsyncWithHttpInfo($user_name, $time_range, $dimension, $layout, $image_size, string $contentType = self::contentTypes['createCoverArtGridForUser'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->createCoverArtGridForUserRequest($user_name, $time_range, $dimension, $layout, $image_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCoverArtGridForUser'
     *
     * @param  string $user_name The name of the user for whom to create the cover art. (required)
     * @param  \Listenbrainz\Model\AllowedStatisticsRange $time_range Must be a statistics time range. (required)
     * @param  int $dimension The dimension to use for this grid. A grid of dimension 3 has 3 images across and 3 images down, for a total of 9 images. (required)
     * @param  int $layout The layout to be used for this grid. Layout 0 is always a simple grid, but other layouts may have image images be of different sizes. See https://art.listenbrainz.org for examples of the available layouts. (required)
     * @param  int $image_size The size of the cover art image. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCoverArtGridForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCoverArtGridForUserRequest($user_name, $time_range, $dimension, $layout, $image_size, string $contentType = self::contentTypes['createCoverArtGridForUser'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling createCoverArtGridForUser'
            );
        }

        // verify the required parameter 'time_range' is set
        if ($time_range === null || (is_array($time_range) && count($time_range) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $time_range when calling createCoverArtGridForUser'
            );
        }

        // verify the required parameter 'dimension' is set
        if ($dimension === null || (is_array($dimension) && count($dimension) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $dimension when calling createCoverArtGridForUser'
            );
        }

        // verify the required parameter 'layout' is set
        if ($layout === null || (is_array($layout) && count($layout) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $layout when calling createCoverArtGridForUser'
            );
        }

        // verify the required parameter 'image_size' is set
        if ($image_size === null || (is_array($image_size) && count($image_size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image_size when calling createCoverArtGridForUser'
            );
        }


        $resourcePath = '/1/art/grid-stats/{user_name}/{time_range}/{dimension}/{layout}/{image_size}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }
        // path params
        if ($time_range !== null) {
            $resourcePath = str_replace(
                '{' . 'time_range' . '}',
                ObjectSerializer::toPathValue($time_range),
                $resourcePath
            );
        }
        // path params
        if ($dimension !== null) {
            $resourcePath = str_replace(
                '{' . 'dimension' . '}',
                ObjectSerializer::toPathValue($dimension),
                $resourcePath
            );
        }
        // path params
        if ($layout !== null) {
            $resourcePath = str_replace(
                '{' . 'layout' . '}',
                ObjectSerializer::toPathValue($layout),
                $resourcePath
            );
        }
        // path params
        if ($image_size !== null) {
            $resourcePath = str_replace(
                '{' . 'image_size' . '}',
                ObjectSerializer::toPathValue($image_size),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['image/svg+xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createCustomCoverArt
     *
     * Create a custom cover art SVG file from the stats of a given user.
     *
     * @param  \Listenbrainz\Model\CoverTypes $custom_name The name of cover art to be generated. (required)
     * @param  string $user_name The name of the user for whom to create the cover art. (required)
     * @param  \Listenbrainz\Model\AllowedStatisticsRange $time_range Must be a statistics time range. (required)
     * @param  int $image_size The size of the cover art image. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCustomCoverArt'] to see the possible values for this operation
     *
     * @throws \Listenbrainz\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function createCustomCoverArt($custom_name, $user_name, $time_range, $image_size, string $contentType = self::contentTypes['createCustomCoverArt'][0])
    {
        list($response) = $this->createCustomCoverArtWithHttpInfo($custom_name, $user_name, $time_range, $image_size, $contentType);
        return $response;
    }

    /**
     * Operation createCustomCoverArtWithHttpInfo
     *
     * Create a custom cover art SVG file from the stats of a given user.
     *
     * @param  \Listenbrainz\Model\CoverTypes $custom_name The name of cover art to be generated. (required)
     * @param  string $user_name The name of the user for whom to create the cover art. (required)
     * @param  \Listenbrainz\Model\AllowedStatisticsRange $time_range Must be a statistics time range. (required)
     * @param  int $image_size The size of the cover art image. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCustomCoverArt'] to see the possible values for this operation
     *
     * @throws \Listenbrainz\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function createCustomCoverArtWithHttpInfo($custom_name, $user_name, $time_range, $image_size, string $contentType = self::contentTypes['createCustomCoverArt'][0])
    {
        $request = $this->createCustomCoverArtRequest($custom_name, $user_name, $time_range, $image_size, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation createCustomCoverArtAsync
     *
     * Create a custom cover art SVG file from the stats of a given user.
     *
     * @param  \Listenbrainz\Model\CoverTypes $custom_name The name of cover art to be generated. (required)
     * @param  string $user_name The name of the user for whom to create the cover art. (required)
     * @param  \Listenbrainz\Model\AllowedStatisticsRange $time_range Must be a statistics time range. (required)
     * @param  int $image_size The size of the cover art image. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCustomCoverArt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCustomCoverArtAsync($custom_name, $user_name, $time_range, $image_size, string $contentType = self::contentTypes['createCustomCoverArt'][0])
    {
        return $this->createCustomCoverArtAsyncWithHttpInfo($custom_name, $user_name, $time_range, $image_size, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createCustomCoverArtAsyncWithHttpInfo
     *
     * Create a custom cover art SVG file from the stats of a given user.
     *
     * @param  \Listenbrainz\Model\CoverTypes $custom_name The name of cover art to be generated. (required)
     * @param  string $user_name The name of the user for whom to create the cover art. (required)
     * @param  \Listenbrainz\Model\AllowedStatisticsRange $time_range Must be a statistics time range. (required)
     * @param  int $image_size The size of the cover art image. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCustomCoverArt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createCustomCoverArtAsyncWithHttpInfo($custom_name, $user_name, $time_range, $image_size, string $contentType = self::contentTypes['createCustomCoverArt'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->createCustomCoverArtRequest($custom_name, $user_name, $time_range, $image_size, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createCustomCoverArt'
     *
     * @param  \Listenbrainz\Model\CoverTypes $custom_name The name of cover art to be generated. (required)
     * @param  string $user_name The name of the user for whom to create the cover art. (required)
     * @param  \Listenbrainz\Model\AllowedStatisticsRange $time_range Must be a statistics time range. (required)
     * @param  int $image_size The size of the cover art image. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createCustomCoverArt'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createCustomCoverArtRequest($custom_name, $user_name, $time_range, $image_size, string $contentType = self::contentTypes['createCustomCoverArt'][0])
    {

        // verify the required parameter 'custom_name' is set
        if ($custom_name === null || (is_array($custom_name) && count($custom_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $custom_name when calling createCustomCoverArt'
            );
        }

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling createCustomCoverArt'
            );
        }

        // verify the required parameter 'time_range' is set
        if ($time_range === null || (is_array($time_range) && count($time_range) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $time_range when calling createCustomCoverArt'
            );
        }

        // verify the required parameter 'image_size' is set
        if ($image_size === null || (is_array($image_size) && count($image_size) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image_size when calling createCustomCoverArt'
            );
        }


        $resourcePath = '/1/art/{custom_name}/{user_name}/{time_range}/{image_size}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($custom_name !== null) {
            $resourcePath = str_replace(
                '{' . 'custom_name' . '}',
                ObjectSerializer::toPathValue($custom_name),
                $resourcePath
            );
        }
        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }
        // path params
        if ($time_range !== null) {
            $resourcePath = str_replace(
                '{' . 'time_range' . '}',
                ObjectSerializer::toPathValue($time_range),
                $resourcePath
            );
        }
        // path params
        if ($image_size !== null) {
            $resourcePath = str_replace(
                '{' . 'image_size' . '}',
                ObjectSerializer::toPathValue($image_size),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['image/svg+xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation yearInMusic
     *
     * Create the shareable svg image using YIM stats.
     *
     * @param  int $year year (required)
     * @param  string $user_name The name of the user for whom to create the cover art. (required)
     * @param  \Listenbrainz\Model\YearInMusicImage $image image (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['yearInMusic'] to see the possible values for this operation
     *
     * @throws \Listenbrainz\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \SplFileObject
     */
    public function yearInMusic($year, $user_name, $image, string $contentType = self::contentTypes['yearInMusic'][0])
    {
        list($response) = $this->yearInMusicWithHttpInfo($year, $user_name, $image, $contentType);
        return $response;
    }

    /**
     * Operation yearInMusicWithHttpInfo
     *
     * Create the shareable svg image using YIM stats.
     *
     * @param  int $year (required)
     * @param  string $user_name The name of the user for whom to create the cover art. (required)
     * @param  \Listenbrainz\Model\YearInMusicImage $image (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['yearInMusic'] to see the possible values for this operation
     *
     * @throws \Listenbrainz\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \SplFileObject, HTTP status code, HTTP response headers (array of strings)
     */
    public function yearInMusicWithHttpInfo($year, $user_name, $image, string $contentType = self::contentTypes['yearInMusic'][0])
    {
        $request = $this->yearInMusicRequest($year, $user_name, $image, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\SplFileObject' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\SplFileObject' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\SplFileObject', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\SplFileObject';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\SplFileObject',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation yearInMusicAsync
     *
     * Create the shareable svg image using YIM stats.
     *
     * @param  int $year (required)
     * @param  string $user_name The name of the user for whom to create the cover art. (required)
     * @param  \Listenbrainz\Model\YearInMusicImage $image (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['yearInMusic'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function yearInMusicAsync($year, $user_name, $image, string $contentType = self::contentTypes['yearInMusic'][0])
    {
        return $this->yearInMusicAsyncWithHttpInfo($year, $user_name, $image, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation yearInMusicAsyncWithHttpInfo
     *
     * Create the shareable svg image using YIM stats.
     *
     * @param  int $year (required)
     * @param  string $user_name The name of the user for whom to create the cover art. (required)
     * @param  \Listenbrainz\Model\YearInMusicImage $image (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['yearInMusic'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function yearInMusicAsyncWithHttpInfo($year, $user_name, $image, string $contentType = self::contentTypes['yearInMusic'][0])
    {
        $returnType = '\SplFileObject';
        $request = $this->yearInMusicRequest($year, $user_name, $image, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'yearInMusic'
     *
     * @param  int $year (required)
     * @param  string $user_name The name of the user for whom to create the cover art. (required)
     * @param  \Listenbrainz\Model\YearInMusicImage $image (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['yearInMusic'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function yearInMusicRequest($year, $user_name, $image, string $contentType = self::contentTypes['yearInMusic'][0])
    {

        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year when calling yearInMusic'
            );
        }

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling yearInMusic'
            );
        }

        // verify the required parameter 'image' is set
        if ($image === null || (is_array($image) && count($image) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $image when calling yearInMusic'
            );
        }


        $resourcePath = '/1/art/year-in-music/{year}/{user_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $image,
            'image', // param base name
            'YearInMusicImage', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($year !== null) {
            $resourcePath = str_replace(
                '{' . 'year' . '}',
                ObjectSerializer::toPathValue($year),
                $resourcePath
            );
        }
        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['image/svg+xml', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
