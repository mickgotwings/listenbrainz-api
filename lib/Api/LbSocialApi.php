<?php
/**
 * LbSocialApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ListenBrainz Swagger - OpenAPI 3.0
 *
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * LbSocialApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LbSocialApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'createNotification' => [
            'application/json',
        ],
        'createReview' => [
            'application/json',
        ],
        'feedEvents' => [
            'application/json',
        ],
        'feedEventsDelete' => [
            'application/json',
        ],
        'feedEventsHide' => [
            'application/json',
        ],
        'feedEventsListensFollowing' => [
            'application/json',
        ],
        'feedEventsListensSimilar' => [
            'application/json',
        ],
        'feedEventsUnhide' => [
            'application/json',
        ],
        'follow' => [
            'application/json',
        ],
        'followers' => [
            'application/json',
        ],
        'following' => [
            'application/json',
        ],
        'recommendPersonalRecording' => [
            'application/json',
        ],
        'recommendRecording' => [
            'application/json',
        ],
        'unfollow' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation createNotification
     *
     * Post a message with a link on a user&#39;s timeline. Only approved users are allowed to perform this action.
     *
     * @param  string $user_name user_name (required)
     * @param  \OpenAPI\Client\Model\CreateNotificationRequest $create_notification_request create_notification_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNotification'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createNotification($user_name, $create_notification_request, string $contentType = self::contentTypes['createNotification'][0])
    {
        $this->createNotificationWithHttpInfo($user_name, $create_notification_request, $contentType);
    }

    /**
     * Operation createNotificationWithHttpInfo
     *
     * Post a message with a link on a user&#39;s timeline. Only approved users are allowed to perform this action.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\CreateNotificationRequest $create_notification_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNotification'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createNotificationWithHttpInfo($user_name, $create_notification_request, string $contentType = self::contentTypes['createNotification'][0])
    {
        $request = $this->createNotificationRequest($user_name, $create_notification_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createNotificationAsync
     *
     * Post a message with a link on a user&#39;s timeline. Only approved users are allowed to perform this action.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\CreateNotificationRequest $create_notification_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNotification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNotificationAsync($user_name, $create_notification_request, string $contentType = self::contentTypes['createNotification'][0])
    {
        return $this->createNotificationAsyncWithHttpInfo($user_name, $create_notification_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createNotificationAsyncWithHttpInfo
     *
     * Post a message with a link on a user&#39;s timeline. Only approved users are allowed to perform this action.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\CreateNotificationRequest $create_notification_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNotification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createNotificationAsyncWithHttpInfo($user_name, $create_notification_request, string $contentType = self::contentTypes['createNotification'][0])
    {
        $returnType = '';
        $request = $this->createNotificationRequest($user_name, $create_notification_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createNotification'
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\CreateNotificationRequest $create_notification_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createNotification'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createNotificationRequest($user_name, $create_notification_request, string $contentType = self::contentTypes['createNotification'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling createNotification'
            );
        }

        // verify the required parameter 'create_notification_request' is set
        if ($create_notification_request === null || (is_array($create_notification_request) && count($create_notification_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_notification_request when calling createNotification'
            );
        }


        $resourcePath = '/1/user/{user_name}/timeline-event/create/notification';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_notification_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_notification_request));
            } else {
                $httpBody = $create_notification_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation createReview
     *
     * Creates a CritiqueBrainz review event for the user. This also creates a corresponding review in CritiqueBrainz. Users need to have linked their ListenBrainz account with CritiqueBrainz first to use this endpoint successfully.
     *
     * @param  string $user_name user_name (required)
     * @param  \OpenAPI\Client\Model\CreateReviewRequest $create_review_request create_review_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReview'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function createReview($user_name, $create_review_request, string $contentType = self::contentTypes['createReview'][0])
    {
        $this->createReviewWithHttpInfo($user_name, $create_review_request, $contentType);
    }

    /**
     * Operation createReviewWithHttpInfo
     *
     * Creates a CritiqueBrainz review event for the user. This also creates a corresponding review in CritiqueBrainz. Users need to have linked their ListenBrainz account with CritiqueBrainz first to use this endpoint successfully.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\CreateReviewRequest $create_review_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReview'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function createReviewWithHttpInfo($user_name, $create_review_request, string $contentType = self::contentTypes['createReview'][0])
    {
        $request = $this->createReviewRequest($user_name, $create_review_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation createReviewAsync
     *
     * Creates a CritiqueBrainz review event for the user. This also creates a corresponding review in CritiqueBrainz. Users need to have linked their ListenBrainz account with CritiqueBrainz first to use this endpoint successfully.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\CreateReviewRequest $create_review_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createReviewAsync($user_name, $create_review_request, string $contentType = self::contentTypes['createReview'][0])
    {
        return $this->createReviewAsyncWithHttpInfo($user_name, $create_review_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation createReviewAsyncWithHttpInfo
     *
     * Creates a CritiqueBrainz review event for the user. This also creates a corresponding review in CritiqueBrainz. Users need to have linked their ListenBrainz account with CritiqueBrainz first to use this endpoint successfully.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\CreateReviewRequest $create_review_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function createReviewAsyncWithHttpInfo($user_name, $create_review_request, string $contentType = self::contentTypes['createReview'][0])
    {
        $returnType = '';
        $request = $this->createReviewRequest($user_name, $create_review_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'createReview'
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\CreateReviewRequest $create_review_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['createReview'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function createReviewRequest($user_name, $create_review_request, string $contentType = self::contentTypes['createReview'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling createReview'
            );
        }

        // verify the required parameter 'create_review_request' is set
        if ($create_review_request === null || (is_array($create_review_request) && count($create_review_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $create_review_request when calling createReview'
            );
        }


        $resourcePath = '/1/user/{user_name}/timeline-event/create/review';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($create_review_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($create_review_request));
            } else {
                $httpBody = $create_review_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation feedEvents
     *
     * CreatGet feed events for a user&#39;s timeline.
     *
     * @param  string $user_name user_name (required)
     * @param  int|null $max_ts If you specify a &#39;max_ts&#39; timestamp, events with timestamps less than the value will be returned. (optional)
     * @param  int|null $min_ts If you specify a &#39;min_ts&#39; timestamp, events with timestamps greater than the value will be returned. (optional)
     * @param  int|null $count count (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEvents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FeedEvents
     */
    public function feedEvents($user_name, $max_ts = null, $min_ts = null, $count = 25, string $contentType = self::contentTypes['feedEvents'][0])
    {
        list($response) = $this->feedEventsWithHttpInfo($user_name, $max_ts, $min_ts, $count, $contentType);
        return $response;
    }

    /**
     * Operation feedEventsWithHttpInfo
     *
     * CreatGet feed events for a user&#39;s timeline.
     *
     * @param  string $user_name (required)
     * @param  int|null $max_ts If you specify a &#39;max_ts&#39; timestamp, events with timestamps less than the value will be returned. (optional)
     * @param  int|null $min_ts If you specify a &#39;min_ts&#39; timestamp, events with timestamps greater than the value will be returned. (optional)
     * @param  int|null $count (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEvents'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FeedEvents, HTTP status code, HTTP response headers (array of strings)
     */
    public function feedEventsWithHttpInfo($user_name, $max_ts = null, $min_ts = null, $count = 25, string $contentType = self::contentTypes['feedEvents'][0])
    {
        $request = $this->feedEventsRequest($user_name, $max_ts, $min_ts, $count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FeedEvents' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FeedEvents' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FeedEvents', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\FeedEvents';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FeedEvents',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation feedEventsAsync
     *
     * CreatGet feed events for a user&#39;s timeline.
     *
     * @param  string $user_name (required)
     * @param  int|null $max_ts If you specify a &#39;max_ts&#39; timestamp, events with timestamps less than the value will be returned. (optional)
     * @param  int|null $min_ts If you specify a &#39;min_ts&#39; timestamp, events with timestamps greater than the value will be returned. (optional)
     * @param  int|null $count (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function feedEventsAsync($user_name, $max_ts = null, $min_ts = null, $count = 25, string $contentType = self::contentTypes['feedEvents'][0])
    {
        return $this->feedEventsAsyncWithHttpInfo($user_name, $max_ts, $min_ts, $count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation feedEventsAsyncWithHttpInfo
     *
     * CreatGet feed events for a user&#39;s timeline.
     *
     * @param  string $user_name (required)
     * @param  int|null $max_ts If you specify a &#39;max_ts&#39; timestamp, events with timestamps less than the value will be returned. (optional)
     * @param  int|null $min_ts If you specify a &#39;min_ts&#39; timestamp, events with timestamps greater than the value will be returned. (optional)
     * @param  int|null $count (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function feedEventsAsyncWithHttpInfo($user_name, $max_ts = null, $min_ts = null, $count = 25, string $contentType = self::contentTypes['feedEvents'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FeedEvents';
        $request = $this->feedEventsRequest($user_name, $max_ts, $min_ts, $count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'feedEvents'
     *
     * @param  string $user_name (required)
     * @param  int|null $max_ts If you specify a &#39;max_ts&#39; timestamp, events with timestamps less than the value will be returned. (optional)
     * @param  int|null $min_ts If you specify a &#39;min_ts&#39; timestamp, events with timestamps greater than the value will be returned. (optional)
     * @param  int|null $count (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEvents'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function feedEventsRequest($user_name, $max_ts = null, $min_ts = null, $count = 25, string $contentType = self::contentTypes['feedEvents'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling feedEvents'
            );
        }





        $resourcePath = '/1/user/{user_name}/feed/events';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_ts,
            'max_ts', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_ts,
            'min_ts', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation feedEventsDelete
     *
     * Delete those events from user&#39;s feed that belong to them. Supports deletion of recommendation and notification. Along with the authorization token, post the event type and event id.
     *
     * @param  string $user_name user_name (required)
     * @param  \OpenAPI\Client\Model\FeedEventsDeleteRequest $feed_events_delete_request feed_events_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEventsDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function feedEventsDelete($user_name, $feed_events_delete_request, string $contentType = self::contentTypes['feedEventsDelete'][0])
    {
        $this->feedEventsDeleteWithHttpInfo($user_name, $feed_events_delete_request, $contentType);
    }

    /**
     * Operation feedEventsDeleteWithHttpInfo
     *
     * Delete those events from user&#39;s feed that belong to them. Supports deletion of recommendation and notification. Along with the authorization token, post the event type and event id.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\FeedEventsDeleteRequest $feed_events_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEventsDelete'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function feedEventsDeleteWithHttpInfo($user_name, $feed_events_delete_request, string $contentType = self::contentTypes['feedEventsDelete'][0])
    {
        $request = $this->feedEventsDeleteRequest($user_name, $feed_events_delete_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation feedEventsDeleteAsync
     *
     * Delete those events from user&#39;s feed that belong to them. Supports deletion of recommendation and notification. Along with the authorization token, post the event type and event id.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\FeedEventsDeleteRequest $feed_events_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEventsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function feedEventsDeleteAsync($user_name, $feed_events_delete_request, string $contentType = self::contentTypes['feedEventsDelete'][0])
    {
        return $this->feedEventsDeleteAsyncWithHttpInfo($user_name, $feed_events_delete_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation feedEventsDeleteAsyncWithHttpInfo
     *
     * Delete those events from user&#39;s feed that belong to them. Supports deletion of recommendation and notification. Along with the authorization token, post the event type and event id.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\FeedEventsDeleteRequest $feed_events_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEventsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function feedEventsDeleteAsyncWithHttpInfo($user_name, $feed_events_delete_request, string $contentType = self::contentTypes['feedEventsDelete'][0])
    {
        $returnType = '';
        $request = $this->feedEventsDeleteRequest($user_name, $feed_events_delete_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'feedEventsDelete'
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\FeedEventsDeleteRequest $feed_events_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEventsDelete'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function feedEventsDeleteRequest($user_name, $feed_events_delete_request, string $contentType = self::contentTypes['feedEventsDelete'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling feedEventsDelete'
            );
        }

        // verify the required parameter 'feed_events_delete_request' is set
        if ($feed_events_delete_request === null || (is_array($feed_events_delete_request) && count($feed_events_delete_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feed_events_delete_request when calling feedEventsDelete'
            );
        }


        $resourcePath = '/1/user/{user_name}/feed/events/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($feed_events_delete_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($feed_events_delete_request));
            } else {
                $httpBody = $feed_events_delete_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation feedEventsHide
     *
     * Hide events from the user feed, only recording_recommendation and recording_pin events that have been generated by the people one is following can be deleted via this endpoint.
     *
     * @param  string $user_name user_name (required)
     * @param  \OpenAPI\Client\Model\FeedEventsDeleteRequest $feed_events_delete_request feed_events_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEventsHide'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function feedEventsHide($user_name, $feed_events_delete_request, string $contentType = self::contentTypes['feedEventsHide'][0])
    {
        $this->feedEventsHideWithHttpInfo($user_name, $feed_events_delete_request, $contentType);
    }

    /**
     * Operation feedEventsHideWithHttpInfo
     *
     * Hide events from the user feed, only recording_recommendation and recording_pin events that have been generated by the people one is following can be deleted via this endpoint.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\FeedEventsDeleteRequest $feed_events_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEventsHide'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function feedEventsHideWithHttpInfo($user_name, $feed_events_delete_request, string $contentType = self::contentTypes['feedEventsHide'][0])
    {
        $request = $this->feedEventsHideRequest($user_name, $feed_events_delete_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation feedEventsHideAsync
     *
     * Hide events from the user feed, only recording_recommendation and recording_pin events that have been generated by the people one is following can be deleted via this endpoint.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\FeedEventsDeleteRequest $feed_events_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEventsHide'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function feedEventsHideAsync($user_name, $feed_events_delete_request, string $contentType = self::contentTypes['feedEventsHide'][0])
    {
        return $this->feedEventsHideAsyncWithHttpInfo($user_name, $feed_events_delete_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation feedEventsHideAsyncWithHttpInfo
     *
     * Hide events from the user feed, only recording_recommendation and recording_pin events that have been generated by the people one is following can be deleted via this endpoint.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\FeedEventsDeleteRequest $feed_events_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEventsHide'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function feedEventsHideAsyncWithHttpInfo($user_name, $feed_events_delete_request, string $contentType = self::contentTypes['feedEventsHide'][0])
    {
        $returnType = '';
        $request = $this->feedEventsHideRequest($user_name, $feed_events_delete_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'feedEventsHide'
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\FeedEventsDeleteRequest $feed_events_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEventsHide'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function feedEventsHideRequest($user_name, $feed_events_delete_request, string $contentType = self::contentTypes['feedEventsHide'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling feedEventsHide'
            );
        }

        // verify the required parameter 'feed_events_delete_request' is set
        if ($feed_events_delete_request === null || (is_array($feed_events_delete_request) && count($feed_events_delete_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feed_events_delete_request when calling feedEventsHide'
            );
        }


        $resourcePath = '/1/user/{user_name}/feed/events/hide';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($feed_events_delete_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($feed_events_delete_request));
            } else {
                $httpBody = $feed_events_delete_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation feedEventsListensFollowing
     *
     * Get feed&#39;s listen events for followed users.
     *
     * @param  string $user_name user_name (required)
     * @param  int|null $max_ts If you specify a &#39;max_ts&#39; timestamp, events with timestamps less than the value will be returned. (optional)
     * @param  int|null $min_ts If you specify a &#39;min_ts&#39; timestamp, events with timestamps greater than the value will be returned. (optional)
     * @param  int|null $count count (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEventsListensFollowing'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FeedEvents
     */
    public function feedEventsListensFollowing($user_name, $max_ts = null, $min_ts = null, $count = 25, string $contentType = self::contentTypes['feedEventsListensFollowing'][0])
    {
        list($response) = $this->feedEventsListensFollowingWithHttpInfo($user_name, $max_ts, $min_ts, $count, $contentType);
        return $response;
    }

    /**
     * Operation feedEventsListensFollowingWithHttpInfo
     *
     * Get feed&#39;s listen events for followed users.
     *
     * @param  string $user_name (required)
     * @param  int|null $max_ts If you specify a &#39;max_ts&#39; timestamp, events with timestamps less than the value will be returned. (optional)
     * @param  int|null $min_ts If you specify a &#39;min_ts&#39; timestamp, events with timestamps greater than the value will be returned. (optional)
     * @param  int|null $count (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEventsListensFollowing'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FeedEvents, HTTP status code, HTTP response headers (array of strings)
     */
    public function feedEventsListensFollowingWithHttpInfo($user_name, $max_ts = null, $min_ts = null, $count = 25, string $contentType = self::contentTypes['feedEventsListensFollowing'][0])
    {
        $request = $this->feedEventsListensFollowingRequest($user_name, $max_ts, $min_ts, $count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FeedEvents' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FeedEvents' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FeedEvents', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\FeedEvents';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FeedEvents',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation feedEventsListensFollowingAsync
     *
     * Get feed&#39;s listen events for followed users.
     *
     * @param  string $user_name (required)
     * @param  int|null $max_ts If you specify a &#39;max_ts&#39; timestamp, events with timestamps less than the value will be returned. (optional)
     * @param  int|null $min_ts If you specify a &#39;min_ts&#39; timestamp, events with timestamps greater than the value will be returned. (optional)
     * @param  int|null $count (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEventsListensFollowing'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function feedEventsListensFollowingAsync($user_name, $max_ts = null, $min_ts = null, $count = 25, string $contentType = self::contentTypes['feedEventsListensFollowing'][0])
    {
        return $this->feedEventsListensFollowingAsyncWithHttpInfo($user_name, $max_ts, $min_ts, $count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation feedEventsListensFollowingAsyncWithHttpInfo
     *
     * Get feed&#39;s listen events for followed users.
     *
     * @param  string $user_name (required)
     * @param  int|null $max_ts If you specify a &#39;max_ts&#39; timestamp, events with timestamps less than the value will be returned. (optional)
     * @param  int|null $min_ts If you specify a &#39;min_ts&#39; timestamp, events with timestamps greater than the value will be returned. (optional)
     * @param  int|null $count (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEventsListensFollowing'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function feedEventsListensFollowingAsyncWithHttpInfo($user_name, $max_ts = null, $min_ts = null, $count = 25, string $contentType = self::contentTypes['feedEventsListensFollowing'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FeedEvents';
        $request = $this->feedEventsListensFollowingRequest($user_name, $max_ts, $min_ts, $count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'feedEventsListensFollowing'
     *
     * @param  string $user_name (required)
     * @param  int|null $max_ts If you specify a &#39;max_ts&#39; timestamp, events with timestamps less than the value will be returned. (optional)
     * @param  int|null $min_ts If you specify a &#39;min_ts&#39; timestamp, events with timestamps greater than the value will be returned. (optional)
     * @param  int|null $count (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEventsListensFollowing'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function feedEventsListensFollowingRequest($user_name, $max_ts = null, $min_ts = null, $count = 25, string $contentType = self::contentTypes['feedEventsListensFollowing'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling feedEventsListensFollowing'
            );
        }





        $resourcePath = '/1/user/{user_name}/feed/events/listens/following';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_ts,
            'max_ts', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_ts,
            'min_ts', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation feedEventsListensSimilar
     *
     * Get feed&#39;s listen events for similar users.
     *
     * @param  string $user_name user_name (required)
     * @param  int|null $max_ts If you specify a &#39;max_ts&#39; timestamp, events with timestamps less than the value will be returned. (optional)
     * @param  int|null $min_ts If you specify a &#39;min_ts&#39; timestamp, events with timestamps greater than the value will be returned. (optional)
     * @param  int|null $count count (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEventsListensSimilar'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\FeedEventsListensSimilar
     */
    public function feedEventsListensSimilar($user_name, $max_ts = null, $min_ts = null, $count = 25, string $contentType = self::contentTypes['feedEventsListensSimilar'][0])
    {
        list($response) = $this->feedEventsListensSimilarWithHttpInfo($user_name, $max_ts, $min_ts, $count, $contentType);
        return $response;
    }

    /**
     * Operation feedEventsListensSimilarWithHttpInfo
     *
     * Get feed&#39;s listen events for similar users.
     *
     * @param  string $user_name (required)
     * @param  int|null $max_ts If you specify a &#39;max_ts&#39; timestamp, events with timestamps less than the value will be returned. (optional)
     * @param  int|null $min_ts If you specify a &#39;min_ts&#39; timestamp, events with timestamps greater than the value will be returned. (optional)
     * @param  int|null $count (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEventsListensSimilar'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\FeedEventsListensSimilar, HTTP status code, HTTP response headers (array of strings)
     */
    public function feedEventsListensSimilarWithHttpInfo($user_name, $max_ts = null, $min_ts = null, $count = 25, string $contentType = self::contentTypes['feedEventsListensSimilar'][0])
    {
        $request = $this->feedEventsListensSimilarRequest($user_name, $max_ts, $min_ts, $count, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\FeedEventsListensSimilar' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\FeedEventsListensSimilar' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\FeedEventsListensSimilar', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\FeedEventsListensSimilar';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\FeedEventsListensSimilar',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation feedEventsListensSimilarAsync
     *
     * Get feed&#39;s listen events for similar users.
     *
     * @param  string $user_name (required)
     * @param  int|null $max_ts If you specify a &#39;max_ts&#39; timestamp, events with timestamps less than the value will be returned. (optional)
     * @param  int|null $min_ts If you specify a &#39;min_ts&#39; timestamp, events with timestamps greater than the value will be returned. (optional)
     * @param  int|null $count (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEventsListensSimilar'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function feedEventsListensSimilarAsync($user_name, $max_ts = null, $min_ts = null, $count = 25, string $contentType = self::contentTypes['feedEventsListensSimilar'][0])
    {
        return $this->feedEventsListensSimilarAsyncWithHttpInfo($user_name, $max_ts, $min_ts, $count, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation feedEventsListensSimilarAsyncWithHttpInfo
     *
     * Get feed&#39;s listen events for similar users.
     *
     * @param  string $user_name (required)
     * @param  int|null $max_ts If you specify a &#39;max_ts&#39; timestamp, events with timestamps less than the value will be returned. (optional)
     * @param  int|null $min_ts If you specify a &#39;min_ts&#39; timestamp, events with timestamps greater than the value will be returned. (optional)
     * @param  int|null $count (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEventsListensSimilar'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function feedEventsListensSimilarAsyncWithHttpInfo($user_name, $max_ts = null, $min_ts = null, $count = 25, string $contentType = self::contentTypes['feedEventsListensSimilar'][0])
    {
        $returnType = '\OpenAPI\Client\Model\FeedEventsListensSimilar';
        $request = $this->feedEventsListensSimilarRequest($user_name, $max_ts, $min_ts, $count, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'feedEventsListensSimilar'
     *
     * @param  string $user_name (required)
     * @param  int|null $max_ts If you specify a &#39;max_ts&#39; timestamp, events with timestamps less than the value will be returned. (optional)
     * @param  int|null $min_ts If you specify a &#39;min_ts&#39; timestamp, events with timestamps greater than the value will be returned. (optional)
     * @param  int|null $count (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEventsListensSimilar'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function feedEventsListensSimilarRequest($user_name, $max_ts = null, $min_ts = null, $count = 25, string $contentType = self::contentTypes['feedEventsListensSimilar'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling feedEventsListensSimilar'
            );
        }





        $resourcePath = '/1/user/{user_name}/feed/events/listens/similar';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $max_ts,
            'max_ts', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $min_ts,
            'min_ts', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation feedEventsUnhide
     *
     * Delete hidden events from the user feed, aka unhide events.
     *
     * @param  string $user_name user_name (required)
     * @param  \OpenAPI\Client\Model\FeedEventsDeleteRequest $feed_events_delete_request feed_events_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEventsUnhide'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function feedEventsUnhide($user_name, $feed_events_delete_request, string $contentType = self::contentTypes['feedEventsUnhide'][0])
    {
        $this->feedEventsUnhideWithHttpInfo($user_name, $feed_events_delete_request, $contentType);
    }

    /**
     * Operation feedEventsUnhideWithHttpInfo
     *
     * Delete hidden events from the user feed, aka unhide events.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\FeedEventsDeleteRequest $feed_events_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEventsUnhide'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function feedEventsUnhideWithHttpInfo($user_name, $feed_events_delete_request, string $contentType = self::contentTypes['feedEventsUnhide'][0])
    {
        $request = $this->feedEventsUnhideRequest($user_name, $feed_events_delete_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation feedEventsUnhideAsync
     *
     * Delete hidden events from the user feed, aka unhide events.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\FeedEventsDeleteRequest $feed_events_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEventsUnhide'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function feedEventsUnhideAsync($user_name, $feed_events_delete_request, string $contentType = self::contentTypes['feedEventsUnhide'][0])
    {
        return $this->feedEventsUnhideAsyncWithHttpInfo($user_name, $feed_events_delete_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation feedEventsUnhideAsyncWithHttpInfo
     *
     * Delete hidden events from the user feed, aka unhide events.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\FeedEventsDeleteRequest $feed_events_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEventsUnhide'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function feedEventsUnhideAsyncWithHttpInfo($user_name, $feed_events_delete_request, string $contentType = self::contentTypes['feedEventsUnhide'][0])
    {
        $returnType = '';
        $request = $this->feedEventsUnhideRequest($user_name, $feed_events_delete_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'feedEventsUnhide'
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\FeedEventsDeleteRequest $feed_events_delete_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedEventsUnhide'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function feedEventsUnhideRequest($user_name, $feed_events_delete_request, string $contentType = self::contentTypes['feedEventsUnhide'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling feedEventsUnhide'
            );
        }

        // verify the required parameter 'feed_events_delete_request' is set
        if ($feed_events_delete_request === null || (is_array($feed_events_delete_request) && count($feed_events_delete_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $feed_events_delete_request when calling feedEventsUnhide'
            );
        }


        $resourcePath = '/1/user/{user_name}/feed/events/unhide';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($feed_events_delete_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($feed_events_delete_request));
            } else {
                $httpBody = $feed_events_delete_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation follow
     *
     * Follow the user &#39;user_name&#39;. A user token (found on https://listenbrainz.org/settings/ ) must be provided in the Authorization header!
     *
     * @param  string $user_name user_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['follow'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function follow($user_name, string $contentType = self::contentTypes['follow'][0])
    {
        $this->followWithHttpInfo($user_name, $contentType);
    }

    /**
     * Operation followWithHttpInfo
     *
     * Follow the user &#39;user_name&#39;. A user token (found on https://listenbrainz.org/settings/ ) must be provided in the Authorization header!
     *
     * @param  string $user_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['follow'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function followWithHttpInfo($user_name, string $contentType = self::contentTypes['follow'][0])
    {
        $request = $this->followRequest($user_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation followAsync
     *
     * Follow the user &#39;user_name&#39;. A user token (found on https://listenbrainz.org/settings/ ) must be provided in the Authorization header!
     *
     * @param  string $user_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['follow'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followAsync($user_name, string $contentType = self::contentTypes['follow'][0])
    {
        return $this->followAsyncWithHttpInfo($user_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation followAsyncWithHttpInfo
     *
     * Follow the user &#39;user_name&#39;. A user token (found on https://listenbrainz.org/settings/ ) must be provided in the Authorization header!
     *
     * @param  string $user_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['follow'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followAsyncWithHttpInfo($user_name, string $contentType = self::contentTypes['follow'][0])
    {
        $returnType = '';
        $request = $this->followRequest($user_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'follow'
     *
     * @param  string $user_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['follow'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function followRequest($user_name, string $contentType = self::contentTypes['follow'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling follow'
            );
        }


        $resourcePath = '/1/user/{user_name}/follow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation followers
     *
     * Fetch the list of followers of the user &#39;user_name&#39;.
     *
     * @param  string $user_name user_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['followers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Followers
     */
    public function followers($user_name, string $contentType = self::contentTypes['followers'][0])
    {
        list($response) = $this->followersWithHttpInfo($user_name, $contentType);
        return $response;
    }

    /**
     * Operation followersWithHttpInfo
     *
     * Fetch the list of followers of the user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['followers'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Followers, HTTP status code, HTTP response headers (array of strings)
     */
    public function followersWithHttpInfo($user_name, string $contentType = self::contentTypes['followers'][0])
    {
        $request = $this->followersRequest($user_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Followers' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Followers' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Followers', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\Followers';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Followers',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation followersAsync
     *
     * Fetch the list of followers of the user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['followers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followersAsync($user_name, string $contentType = self::contentTypes['followers'][0])
    {
        return $this->followersAsyncWithHttpInfo($user_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation followersAsyncWithHttpInfo
     *
     * Fetch the list of followers of the user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['followers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followersAsyncWithHttpInfo($user_name, string $contentType = self::contentTypes['followers'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Followers';
        $request = $this->followersRequest($user_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'followers'
     *
     * @param  string $user_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['followers'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function followersRequest($user_name, string $contentType = self::contentTypes['followers'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling followers'
            );
        }


        $resourcePath = '/1/user/{user_name}/followers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation following
     *
     * Fetch the list of users followed by the user &#39;user_name&#39;.
     *
     * @param  string $user_name user_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['following'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\Following
     */
    public function following($user_name, string $contentType = self::contentTypes['following'][0])
    {
        list($response) = $this->followingWithHttpInfo($user_name, $contentType);
        return $response;
    }

    /**
     * Operation followingWithHttpInfo
     *
     * Fetch the list of users followed by the user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['following'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\Following, HTTP status code, HTTP response headers (array of strings)
     */
    public function followingWithHttpInfo($user_name, string $contentType = self::contentTypes['following'][0])
    {
        $request = $this->followingRequest($user_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\Following' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\Following' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\Following', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\Following';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\Following',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation followingAsync
     *
     * Fetch the list of users followed by the user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['following'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followingAsync($user_name, string $contentType = self::contentTypes['following'][0])
    {
        return $this->followingAsyncWithHttpInfo($user_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation followingAsyncWithHttpInfo
     *
     * Fetch the list of users followed by the user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['following'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function followingAsyncWithHttpInfo($user_name, string $contentType = self::contentTypes['following'][0])
    {
        $returnType = '\OpenAPI\Client\Model\Following';
        $request = $this->followingRequest($user_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'following'
     *
     * @param  string $user_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['following'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function followingRequest($user_name, string $contentType = self::contentTypes['following'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling following'
            );
        }


        $resourcePath = '/1/user/{user_name}/following';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recommendPersonalRecording
     *
     * Make the user recommend a recording to their followers. The request should post the following data about the recording being recommended (either one of recording_msid or recording_mbid is sufficient), and also the list of followers getting recommended.
     *
     * @param  string $user_name user_name (required)
     * @param  \OpenAPI\Client\Model\RecommendPersonalRecordingRequest $recommend_personal_recording_request recommend_personal_recording_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recommendPersonalRecording'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function recommendPersonalRecording($user_name, $recommend_personal_recording_request, string $contentType = self::contentTypes['recommendPersonalRecording'][0])
    {
        $this->recommendPersonalRecordingWithHttpInfo($user_name, $recommend_personal_recording_request, $contentType);
    }

    /**
     * Operation recommendPersonalRecordingWithHttpInfo
     *
     * Make the user recommend a recording to their followers. The request should post the following data about the recording being recommended (either one of recording_msid or recording_mbid is sufficient), and also the list of followers getting recommended.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\RecommendPersonalRecordingRequest $recommend_personal_recording_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recommendPersonalRecording'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function recommendPersonalRecordingWithHttpInfo($user_name, $recommend_personal_recording_request, string $contentType = self::contentTypes['recommendPersonalRecording'][0])
    {
        $request = $this->recommendPersonalRecordingRequest($user_name, $recommend_personal_recording_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation recommendPersonalRecordingAsync
     *
     * Make the user recommend a recording to their followers. The request should post the following data about the recording being recommended (either one of recording_msid or recording_mbid is sufficient), and also the list of followers getting recommended.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\RecommendPersonalRecordingRequest $recommend_personal_recording_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recommendPersonalRecording'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recommendPersonalRecordingAsync($user_name, $recommend_personal_recording_request, string $contentType = self::contentTypes['recommendPersonalRecording'][0])
    {
        return $this->recommendPersonalRecordingAsyncWithHttpInfo($user_name, $recommend_personal_recording_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recommendPersonalRecordingAsyncWithHttpInfo
     *
     * Make the user recommend a recording to their followers. The request should post the following data about the recording being recommended (either one of recording_msid or recording_mbid is sufficient), and also the list of followers getting recommended.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\RecommendPersonalRecordingRequest $recommend_personal_recording_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recommendPersonalRecording'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recommendPersonalRecordingAsyncWithHttpInfo($user_name, $recommend_personal_recording_request, string $contentType = self::contentTypes['recommendPersonalRecording'][0])
    {
        $returnType = '';
        $request = $this->recommendPersonalRecordingRequest($user_name, $recommend_personal_recording_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recommendPersonalRecording'
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\RecommendPersonalRecordingRequest $recommend_personal_recording_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recommendPersonalRecording'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recommendPersonalRecordingRequest($user_name, $recommend_personal_recording_request, string $contentType = self::contentTypes['recommendPersonalRecording'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling recommendPersonalRecording'
            );
        }

        // verify the required parameter 'recommend_personal_recording_request' is set
        if ($recommend_personal_recording_request === null || (is_array($recommend_personal_recording_request) && count($recommend_personal_recording_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recommend_personal_recording_request when calling recommendPersonalRecording'
            );
        }


        $resourcePath = '/1/user/{user_name}/timeline-event/create/recommend-personal';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($recommend_personal_recording_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($recommend_personal_recording_request));
            } else {
                $httpBody = $recommend_personal_recording_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recommendRecording
     *
     * Make the user recommend a recording to their followers.
     *
     * @param  string $user_name user_name (required)
     * @param  \OpenAPI\Client\Model\RecommendRecordingRequest $recommend_recording_request recommend_recording_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recommendRecording'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function recommendRecording($user_name, $recommend_recording_request, string $contentType = self::contentTypes['recommendRecording'][0])
    {
        $this->recommendRecordingWithHttpInfo($user_name, $recommend_recording_request, $contentType);
    }

    /**
     * Operation recommendRecordingWithHttpInfo
     *
     * Make the user recommend a recording to their followers.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\RecommendRecordingRequest $recommend_recording_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recommendRecording'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function recommendRecordingWithHttpInfo($user_name, $recommend_recording_request, string $contentType = self::contentTypes['recommendRecording'][0])
    {
        $request = $this->recommendRecordingRequest($user_name, $recommend_recording_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation recommendRecordingAsync
     *
     * Make the user recommend a recording to their followers.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\RecommendRecordingRequest $recommend_recording_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recommendRecording'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recommendRecordingAsync($user_name, $recommend_recording_request, string $contentType = self::contentTypes['recommendRecording'][0])
    {
        return $this->recommendRecordingAsyncWithHttpInfo($user_name, $recommend_recording_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recommendRecordingAsyncWithHttpInfo
     *
     * Make the user recommend a recording to their followers.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\RecommendRecordingRequest $recommend_recording_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recommendRecording'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recommendRecordingAsyncWithHttpInfo($user_name, $recommend_recording_request, string $contentType = self::contentTypes['recommendRecording'][0])
    {
        $returnType = '';
        $request = $this->recommendRecordingRequest($user_name, $recommend_recording_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recommendRecording'
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\RecommendRecordingRequest $recommend_recording_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recommendRecording'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recommendRecordingRequest($user_name, $recommend_recording_request, string $contentType = self::contentTypes['recommendRecording'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling recommendRecording'
            );
        }

        // verify the required parameter 'recommend_recording_request' is set
        if ($recommend_recording_request === null || (is_array($recommend_recording_request) && count($recommend_recording_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $recommend_recording_request when calling recommendRecording'
            );
        }


        $resourcePath = '/1/user/{user_name}/timeline-event/create/recording';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($recommend_recording_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($recommend_recording_request));
            } else {
                $httpBody = $recommend_recording_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation unfollow
     *
     * Unfollow the user &#39;user_name&#39;. A user token (found on https://listenbrainz.org/settings/ ) must be provided in the Authorization header!
     *
     * @param  string $user_name user_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unfollow'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function unfollow($user_name, string $contentType = self::contentTypes['unfollow'][0])
    {
        $this->unfollowWithHttpInfo($user_name, $contentType);
    }

    /**
     * Operation unfollowWithHttpInfo
     *
     * Unfollow the user &#39;user_name&#39;. A user token (found on https://listenbrainz.org/settings/ ) must be provided in the Authorization header!
     *
     * @param  string $user_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unfollow'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function unfollowWithHttpInfo($user_name, string $contentType = self::contentTypes['unfollow'][0])
    {
        $request = $this->unfollowRequest($user_name, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation unfollowAsync
     *
     * Unfollow the user &#39;user_name&#39;. A user token (found on https://listenbrainz.org/settings/ ) must be provided in the Authorization header!
     *
     * @param  string $user_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unfollow'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unfollowAsync($user_name, string $contentType = self::contentTypes['unfollow'][0])
    {
        return $this->unfollowAsyncWithHttpInfo($user_name, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation unfollowAsyncWithHttpInfo
     *
     * Unfollow the user &#39;user_name&#39;. A user token (found on https://listenbrainz.org/settings/ ) must be provided in the Authorization header!
     *
     * @param  string $user_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unfollow'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function unfollowAsyncWithHttpInfo($user_name, string $contentType = self::contentTypes['unfollow'][0])
    {
        $returnType = '';
        $request = $this->unfollowRequest($user_name, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'unfollow'
     *
     * @param  string $user_name (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['unfollow'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function unfollowRequest($user_name, string $contentType = self::contentTypes['unfollow'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling unfollow'
            );
        }


        $resourcePath = '/1/user/{user_name}/unfollow';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
