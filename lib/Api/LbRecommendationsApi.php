<?php
/**
 * LbRecommendationsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  Listenbrainz
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ListenBrainz Swagger - OpenAPI 3.0
 *
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Listenbrainz\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Listenbrainz\ApiException;
use Listenbrainz\Configuration;
use Listenbrainz\HeaderSelector;
use Listenbrainz\ObjectSerializer;

/**
 * LbRecommendationsApi Class Doc Comment
 *
 * @category Class
 * @package  Listenbrainz
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LbRecommendationsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'deleteFeedback' => [
            'application/json',
        ],
        'feedbackGivenBy' => [
            'application/json',
        ],
        'recordingRecommendations' => [
            'application/json',
        ],
        'recordingsFeedbackGivenBy' => [
            'application/json',
        ],
        'submitFeedback' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation deleteFeedback
     *
     * Delete feedback for a user. A user token (found on https://listenbrainz.org/settings/ ) must be provided in the Authorization header! Each request should contain only one recording mbid in the payload.
     *
     * @param  \Listenbrainz\Model\DeleteFeedbackRequest $delete_feedback_request delete_feedback_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFeedback'] to see the possible values for this operation
     *
     * @throws \Listenbrainz\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function deleteFeedback($delete_feedback_request, string $contentType = self::contentTypes['deleteFeedback'][0])
    {
        $this->deleteFeedbackWithHttpInfo($delete_feedback_request, $contentType);
    }

    /**
     * Operation deleteFeedbackWithHttpInfo
     *
     * Delete feedback for a user. A user token (found on https://listenbrainz.org/settings/ ) must be provided in the Authorization header! Each request should contain only one recording mbid in the payload.
     *
     * @param  \Listenbrainz\Model\DeleteFeedbackRequest $delete_feedback_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFeedback'] to see the possible values for this operation
     *
     * @throws \Listenbrainz\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function deleteFeedbackWithHttpInfo($delete_feedback_request, string $contentType = self::contentTypes['deleteFeedback'][0])
    {
        $request = $this->deleteFeedbackRequest($delete_feedback_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation deleteFeedbackAsync
     *
     * Delete feedback for a user. A user token (found on https://listenbrainz.org/settings/ ) must be provided in the Authorization header! Each request should contain only one recording mbid in the payload.
     *
     * @param  \Listenbrainz\Model\DeleteFeedbackRequest $delete_feedback_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFeedback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFeedbackAsync($delete_feedback_request, string $contentType = self::contentTypes['deleteFeedback'][0])
    {
        return $this->deleteFeedbackAsyncWithHttpInfo($delete_feedback_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation deleteFeedbackAsyncWithHttpInfo
     *
     * Delete feedback for a user. A user token (found on https://listenbrainz.org/settings/ ) must be provided in the Authorization header! Each request should contain only one recording mbid in the payload.
     *
     * @param  \Listenbrainz\Model\DeleteFeedbackRequest $delete_feedback_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFeedback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function deleteFeedbackAsyncWithHttpInfo($delete_feedback_request, string $contentType = self::contentTypes['deleteFeedback'][0])
    {
        $returnType = '';
        $request = $this->deleteFeedbackRequest($delete_feedback_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'deleteFeedback'
     *
     * @param  \Listenbrainz\Model\DeleteFeedbackRequest $delete_feedback_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['deleteFeedback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function deleteFeedbackRequest($delete_feedback_request, string $contentType = self::contentTypes['deleteFeedback'][0])
    {

        // verify the required parameter 'delete_feedback_request' is set
        if ($delete_feedback_request === null || (is_array($delete_feedback_request) && count($delete_feedback_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $delete_feedback_request when calling deleteFeedback'
            );
        }


        $resourcePath = '/1/recommendations/feedback/delete';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($delete_feedback_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($delete_feedback_request));
            } else {
                $httpBody = $delete_feedback_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation feedbackGivenBy
     *
     * Get feedback given by user &#39;user_name&#39;.
     *
     * @param  string $user_name The MusicBrainz ID of the user whose timeline is being requested. (required)
     * @param  string|null $rating Optional, refer to db/model/recommendation_feedback.py for allowed rating values. (optional)
     * @param  int|null $count Optional, number of recording mbids to return. (optional, default to 25)
     * @param  int|null $offset Optional, number of mbids to skip from the beginning, for pagination. Ex. An offset of 5 means the 5 mbids will be skipped. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedbackGivenBy'] to see the possible values for this operation
     *
     * @throws \Listenbrainz\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Listenbrainz\Model\FeedbackGivenBy
     */
    public function feedbackGivenBy($user_name, $rating = null, $count = 25, $offset = 25, string $contentType = self::contentTypes['feedbackGivenBy'][0])
    {
        list($response) = $this->feedbackGivenByWithHttpInfo($user_name, $rating, $count, $offset, $contentType);
        return $response;
    }

    /**
     * Operation feedbackGivenByWithHttpInfo
     *
     * Get feedback given by user &#39;user_name&#39;.
     *
     * @param  string $user_name The MusicBrainz ID of the user whose timeline is being requested. (required)
     * @param  string|null $rating Optional, refer to db/model/recommendation_feedback.py for allowed rating values. (optional)
     * @param  int|null $count Optional, number of recording mbids to return. (optional, default to 25)
     * @param  int|null $offset Optional, number of mbids to skip from the beginning, for pagination. Ex. An offset of 5 means the 5 mbids will be skipped. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedbackGivenBy'] to see the possible values for this operation
     *
     * @throws \Listenbrainz\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Listenbrainz\Model\FeedbackGivenBy, HTTP status code, HTTP response headers (array of strings)
     */
    public function feedbackGivenByWithHttpInfo($user_name, $rating = null, $count = 25, $offset = 25, string $contentType = self::contentTypes['feedbackGivenBy'][0])
    {
        $request = $this->feedbackGivenByRequest($user_name, $rating, $count, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Listenbrainz\Model\FeedbackGivenBy' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Listenbrainz\Model\FeedbackGivenBy' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Listenbrainz\Model\FeedbackGivenBy', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Listenbrainz\Model\FeedbackGivenBy';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Listenbrainz\Model\FeedbackGivenBy',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation feedbackGivenByAsync
     *
     * Get feedback given by user &#39;user_name&#39;.
     *
     * @param  string $user_name The MusicBrainz ID of the user whose timeline is being requested. (required)
     * @param  string|null $rating Optional, refer to db/model/recommendation_feedback.py for allowed rating values. (optional)
     * @param  int|null $count Optional, number of recording mbids to return. (optional, default to 25)
     * @param  int|null $offset Optional, number of mbids to skip from the beginning, for pagination. Ex. An offset of 5 means the 5 mbids will be skipped. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedbackGivenBy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function feedbackGivenByAsync($user_name, $rating = null, $count = 25, $offset = 25, string $contentType = self::contentTypes['feedbackGivenBy'][0])
    {
        return $this->feedbackGivenByAsyncWithHttpInfo($user_name, $rating, $count, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation feedbackGivenByAsyncWithHttpInfo
     *
     * Get feedback given by user &#39;user_name&#39;.
     *
     * @param  string $user_name The MusicBrainz ID of the user whose timeline is being requested. (required)
     * @param  string|null $rating Optional, refer to db/model/recommendation_feedback.py for allowed rating values. (optional)
     * @param  int|null $count Optional, number of recording mbids to return. (optional, default to 25)
     * @param  int|null $offset Optional, number of mbids to skip from the beginning, for pagination. Ex. An offset of 5 means the 5 mbids will be skipped. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedbackGivenBy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function feedbackGivenByAsyncWithHttpInfo($user_name, $rating = null, $count = 25, $offset = 25, string $contentType = self::contentTypes['feedbackGivenBy'][0])
    {
        $returnType = '\Listenbrainz\Model\FeedbackGivenBy';
        $request = $this->feedbackGivenByRequest($user_name, $rating, $count, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'feedbackGivenBy'
     *
     * @param  string $user_name The MusicBrainz ID of the user whose timeline is being requested. (required)
     * @param  string|null $rating Optional, refer to db/model/recommendation_feedback.py for allowed rating values. (optional)
     * @param  int|null $count Optional, number of recording mbids to return. (optional, default to 25)
     * @param  int|null $offset Optional, number of mbids to skip from the beginning, for pagination. Ex. An offset of 5 means the 5 mbids will be skipped. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['feedbackGivenBy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function feedbackGivenByRequest($user_name, $rating = null, $count = 25, $offset = 25, string $contentType = self::contentTypes['feedbackGivenBy'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling feedbackGivenBy'
            );
        }





        $resourcePath = '/1/recommendations/feedback/user/{user_name}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $rating,
            'rating', // param base name
            'string', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recordingRecommendations
     *
     * Get recommendations sorted on rating and ratings for user &#39;user_name&#39;.
     *
     * @param  string $user_name The MusicBrainz ID of the user whose timeline is being requested. (required)
     * @param  int|null $count Optional, number of recording mbids to return. (optional, default to 25)
     * @param  int|null $offset Optional, number of mbids to skip from the beginning, for pagination. Ex. An offset of 5 means the 5 mbids will be skipped. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recordingRecommendations'] to see the possible values for this operation
     *
     * @throws \Listenbrainz\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Listenbrainz\Model\RecordingRecommendations
     */
    public function recordingRecommendations($user_name, $count = 25, $offset = 25, string $contentType = self::contentTypes['recordingRecommendations'][0])
    {
        list($response) = $this->recordingRecommendationsWithHttpInfo($user_name, $count, $offset, $contentType);
        return $response;
    }

    /**
     * Operation recordingRecommendationsWithHttpInfo
     *
     * Get recommendations sorted on rating and ratings for user &#39;user_name&#39;.
     *
     * @param  string $user_name The MusicBrainz ID of the user whose timeline is being requested. (required)
     * @param  int|null $count Optional, number of recording mbids to return. (optional, default to 25)
     * @param  int|null $offset Optional, number of mbids to skip from the beginning, for pagination. Ex. An offset of 5 means the 5 mbids will be skipped. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recordingRecommendations'] to see the possible values for this operation
     *
     * @throws \Listenbrainz\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Listenbrainz\Model\RecordingRecommendations, HTTP status code, HTTP response headers (array of strings)
     */
    public function recordingRecommendationsWithHttpInfo($user_name, $count = 25, $offset = 25, string $contentType = self::contentTypes['recordingRecommendations'][0])
    {
        $request = $this->recordingRecommendationsRequest($user_name, $count, $offset, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Listenbrainz\Model\RecordingRecommendations' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Listenbrainz\Model\RecordingRecommendations' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Listenbrainz\Model\RecordingRecommendations', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Listenbrainz\Model\RecordingRecommendations';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Listenbrainz\Model\RecordingRecommendations',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recordingRecommendationsAsync
     *
     * Get recommendations sorted on rating and ratings for user &#39;user_name&#39;.
     *
     * @param  string $user_name The MusicBrainz ID of the user whose timeline is being requested. (required)
     * @param  int|null $count Optional, number of recording mbids to return. (optional, default to 25)
     * @param  int|null $offset Optional, number of mbids to skip from the beginning, for pagination. Ex. An offset of 5 means the 5 mbids will be skipped. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recordingRecommendations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recordingRecommendationsAsync($user_name, $count = 25, $offset = 25, string $contentType = self::contentTypes['recordingRecommendations'][0])
    {
        return $this->recordingRecommendationsAsyncWithHttpInfo($user_name, $count, $offset, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recordingRecommendationsAsyncWithHttpInfo
     *
     * Get recommendations sorted on rating and ratings for user &#39;user_name&#39;.
     *
     * @param  string $user_name The MusicBrainz ID of the user whose timeline is being requested. (required)
     * @param  int|null $count Optional, number of recording mbids to return. (optional, default to 25)
     * @param  int|null $offset Optional, number of mbids to skip from the beginning, for pagination. Ex. An offset of 5 means the 5 mbids will be skipped. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recordingRecommendations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recordingRecommendationsAsyncWithHttpInfo($user_name, $count = 25, $offset = 25, string $contentType = self::contentTypes['recordingRecommendations'][0])
    {
        $returnType = '\Listenbrainz\Model\RecordingRecommendations';
        $request = $this->recordingRecommendationsRequest($user_name, $count, $offset, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recordingRecommendations'
     *
     * @param  string $user_name The MusicBrainz ID of the user whose timeline is being requested. (required)
     * @param  int|null $count Optional, number of recording mbids to return. (optional, default to 25)
     * @param  int|null $offset Optional, number of mbids to skip from the beginning, for pagination. Ex. An offset of 5 means the 5 mbids will be skipped. (optional, default to 25)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recordingRecommendations'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recordingRecommendationsRequest($user_name, $count = 25, $offset = 25, string $contentType = self::contentTypes['recordingRecommendations'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling recordingRecommendations'
            );
        }




        $resourcePath = '/1/cf/recommendation/user/{user_name}/recording';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation recordingsFeedbackGivenBy
     *
     * Get feedback given by user &#39;user_name&#39; for the list of recordings supplied.
     *
     * @param  string $user_name The MusicBrainz ID of the user whose timeline is being requested. (required)
     * @param  string[] $mbids Comma separated list of recording_mbids for which feedback records are to be fetched. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recordingsFeedbackGivenBy'] to see the possible values for this operation
     *
     * @throws \Listenbrainz\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \Listenbrainz\Model\RecordingsFeedbackGivenBy
     */
    public function recordingsFeedbackGivenBy($user_name, $mbids, string $contentType = self::contentTypes['recordingsFeedbackGivenBy'][0])
    {
        list($response) = $this->recordingsFeedbackGivenByWithHttpInfo($user_name, $mbids, $contentType);
        return $response;
    }

    /**
     * Operation recordingsFeedbackGivenByWithHttpInfo
     *
     * Get feedback given by user &#39;user_name&#39; for the list of recordings supplied.
     *
     * @param  string $user_name The MusicBrainz ID of the user whose timeline is being requested. (required)
     * @param  string[] $mbids Comma separated list of recording_mbids for which feedback records are to be fetched. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recordingsFeedbackGivenBy'] to see the possible values for this operation
     *
     * @throws \Listenbrainz\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \Listenbrainz\Model\RecordingsFeedbackGivenBy, HTTP status code, HTTP response headers (array of strings)
     */
    public function recordingsFeedbackGivenByWithHttpInfo($user_name, $mbids, string $contentType = self::contentTypes['recordingsFeedbackGivenBy'][0])
    {
        $request = $this->recordingsFeedbackGivenByRequest($user_name, $mbids, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\Listenbrainz\Model\RecordingsFeedbackGivenBy' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\Listenbrainz\Model\RecordingsFeedbackGivenBy' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\Listenbrainz\Model\RecordingsFeedbackGivenBy', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\Listenbrainz\Model\RecordingsFeedbackGivenBy';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Listenbrainz\Model\RecordingsFeedbackGivenBy',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation recordingsFeedbackGivenByAsync
     *
     * Get feedback given by user &#39;user_name&#39; for the list of recordings supplied.
     *
     * @param  string $user_name The MusicBrainz ID of the user whose timeline is being requested. (required)
     * @param  string[] $mbids Comma separated list of recording_mbids for which feedback records are to be fetched. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recordingsFeedbackGivenBy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recordingsFeedbackGivenByAsync($user_name, $mbids, string $contentType = self::contentTypes['recordingsFeedbackGivenBy'][0])
    {
        return $this->recordingsFeedbackGivenByAsyncWithHttpInfo($user_name, $mbids, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation recordingsFeedbackGivenByAsyncWithHttpInfo
     *
     * Get feedback given by user &#39;user_name&#39; for the list of recordings supplied.
     *
     * @param  string $user_name The MusicBrainz ID of the user whose timeline is being requested. (required)
     * @param  string[] $mbids Comma separated list of recording_mbids for which feedback records are to be fetched. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recordingsFeedbackGivenBy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function recordingsFeedbackGivenByAsyncWithHttpInfo($user_name, $mbids, string $contentType = self::contentTypes['recordingsFeedbackGivenBy'][0])
    {
        $returnType = '\Listenbrainz\Model\RecordingsFeedbackGivenBy';
        $request = $this->recordingsFeedbackGivenByRequest($user_name, $mbids, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'recordingsFeedbackGivenBy'
     *
     * @param  string $user_name The MusicBrainz ID of the user whose timeline is being requested. (required)
     * @param  string[] $mbids Comma separated list of recording_mbids for which feedback records are to be fetched. (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['recordingsFeedbackGivenBy'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function recordingsFeedbackGivenByRequest($user_name, $mbids, string $contentType = self::contentTypes['recordingsFeedbackGivenBy'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling recordingsFeedbackGivenBy'
            );
        }

        // verify the required parameter 'mbids' is set
        if ($mbids === null || (is_array($mbids) && count($mbids) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $mbids when calling recordingsFeedbackGivenBy'
            );
        }


        $resourcePath = '/1/recommendations/feedback/user/{user_name}/recordings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $mbids,
            'mbids', // param base name
            'array', // openApiType
            '', // style
            false, // explode
            true // required
        ) ?? []);


        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation submitFeedback
     *
     * Submit recommendation feedback. A user token (found on https://listenbrainz.org/settings/ ) must be provided in the Authorization header! Each request should contain only one feedback in the payload.
     *
     * @param  \Listenbrainz\Model\SubmitFeedbackRequest $submit_feedback_request submit_feedback_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitFeedback'] to see the possible values for this operation
     *
     * @throws \Listenbrainz\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return void
     */
    public function submitFeedback($submit_feedback_request, string $contentType = self::contentTypes['submitFeedback'][0])
    {
        $this->submitFeedbackWithHttpInfo($submit_feedback_request, $contentType);
    }

    /**
     * Operation submitFeedbackWithHttpInfo
     *
     * Submit recommendation feedback. A user token (found on https://listenbrainz.org/settings/ ) must be provided in the Authorization header! Each request should contain only one feedback in the payload.
     *
     * @param  \Listenbrainz\Model\SubmitFeedbackRequest $submit_feedback_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitFeedback'] to see the possible values for this operation
     *
     * @throws \Listenbrainz\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function submitFeedbackWithHttpInfo($submit_feedback_request, string $contentType = self::contentTypes['submitFeedback'][0])
    {
        $request = $this->submitFeedbackRequest($submit_feedback_request, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation submitFeedbackAsync
     *
     * Submit recommendation feedback. A user token (found on https://listenbrainz.org/settings/ ) must be provided in the Authorization header! Each request should contain only one feedback in the payload.
     *
     * @param  \Listenbrainz\Model\SubmitFeedbackRequest $submit_feedback_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitFeedback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitFeedbackAsync($submit_feedback_request, string $contentType = self::contentTypes['submitFeedback'][0])
    {
        return $this->submitFeedbackAsyncWithHttpInfo($submit_feedback_request, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation submitFeedbackAsyncWithHttpInfo
     *
     * Submit recommendation feedback. A user token (found on https://listenbrainz.org/settings/ ) must be provided in the Authorization header! Each request should contain only one feedback in the payload.
     *
     * @param  \Listenbrainz\Model\SubmitFeedbackRequest $submit_feedback_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitFeedback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function submitFeedbackAsyncWithHttpInfo($submit_feedback_request, string $contentType = self::contentTypes['submitFeedback'][0])
    {
        $returnType = '';
        $request = $this->submitFeedbackRequest($submit_feedback_request, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'submitFeedback'
     *
     * @param  \Listenbrainz\Model\SubmitFeedbackRequest $submit_feedback_request (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['submitFeedback'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function submitFeedbackRequest($submit_feedback_request, string $contentType = self::contentTypes['submitFeedback'][0])
    {

        // verify the required parameter 'submit_feedback_request' is set
        if ($submit_feedback_request === null || (is_array($submit_feedback_request) && count($submit_feedback_request) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $submit_feedback_request when calling submitFeedback'
            );
        }


        $resourcePath = '/1/recommendation/feedback/submit';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;





        $headers = $this->headerSelector->selectHeaders(
            [],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (isset($submit_feedback_request)) {
            if (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the body
                $httpBody = \GuzzleHttp\Utils::jsonEncode(ObjectSerializer::sanitizeForSerialization($submit_feedback_request));
            } else {
                $httpBody = $submit_feedback_request;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }

        // this endpoint requires API key authentication
        $apiKey = $this->config->getApiKeyWithPrefix('Authorization');
        if ($apiKey !== null) {
            $headers['Authorization'] = $apiKey;
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'POST',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
