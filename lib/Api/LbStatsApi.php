<?php
/**
 * LbStatsApi
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ListenBrainz Swagger - OpenAPI 3.0
 *
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace Listenbrainz\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\ConnectException;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use OpenAPI\Client\ApiException;
use OpenAPI\Client\Configuration;
use OpenAPI\Client\HeaderSelector;
use OpenAPI\Client\ObjectSerializer;

/**
 * LbStatsApi Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LbStatsApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /** @var string[] $contentTypes **/
    public const contentTypes = [
        'artistMapForUser' => [
            'application/json',
        ],
        'dailyActivityForUser' => [
            'application/json',
        ],
        'listenersForArtist' => [
            'application/json',
        ],
        'listenersForReleaseGroup' => [
            'application/json',
        ],
        'listeningActivityForUser' => [
            'application/json',
        ],
        'sitewideArtistMap' => [
            'application/json',
        ],
        'sitewideListeningActivity' => [
            'application/json',
        ],
        'sitewideTopArtists' => [
            'application/json',
        ],
        'sitewideTopRecordings' => [
            'application/json',
        ],
        'sitewideTopReleaseGroups' => [
            'application/json',
        ],
        'sitewideTopReleases' => [
            'application/json',
        ],
        'topArtistsForUser' => [
            'application/json',
        ],
        'topRecordingsForUser' => [
            'application/json',
        ],
        'topReleaseGroupsForUser' => [
            'application/json',
        ],
        'topReleasesForUser' => [
            'application/json',
        ],
        'yearInMusicForUser' => [
            'application/json',
        ],
    ];

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $hostIndex (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ?ClientInterface $client = null,
        ?Configuration $config = null,
        ?HeaderSelector $selector = null,
        int $hostIndex = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: Configuration::getDefaultConfiguration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $hostIndex;
    }

    /**
     * Set the host index
     *
     * @param int $hostIndex Host index (required)
     */
    public function setHostIndex($hostIndex): void
    {
        $this->hostIndex = $hostIndex;
    }

    /**
     * Get the host index
     *
     * @return int Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation artistMapForUser
     *
     * Get the artist map for user &#39;user_name&#39;.
     *
     * @param  string $user_name user_name (required)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range range (optional)
     * @param  bool|null $force_recalculate Optional, recalculate the data instead of returning the cached result. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['artistMapForUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ArtistMapForUser
     */
    public function artistMapForUser($user_name, $range = null, $force_recalculate = false, string $contentType = self::contentTypes['artistMapForUser'][0])
    {
        list($response) = $this->artistMapForUserWithHttpInfo($user_name, $range, $force_recalculate, $contentType);
        return $response;
    }

    /**
     * Operation artistMapForUserWithHttpInfo
     *
     * Get the artist map for user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  bool|null $force_recalculate Optional, recalculate the data instead of returning the cached result. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['artistMapForUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ArtistMapForUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function artistMapForUserWithHttpInfo($user_name, $range = null, $force_recalculate = false, string $contentType = self::contentTypes['artistMapForUser'][0])
    {
        $request = $this->artistMapForUserRequest($user_name, $range, $force_recalculate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ArtistMapForUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ArtistMapForUser' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ArtistMapForUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ArtistMapForUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ArtistMapForUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation artistMapForUserAsync
     *
     * Get the artist map for user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  bool|null $force_recalculate Optional, recalculate the data instead of returning the cached result. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['artistMapForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function artistMapForUserAsync($user_name, $range = null, $force_recalculate = false, string $contentType = self::contentTypes['artistMapForUser'][0])
    {
        return $this->artistMapForUserAsyncWithHttpInfo($user_name, $range, $force_recalculate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation artistMapForUserAsyncWithHttpInfo
     *
     * Get the artist map for user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  bool|null $force_recalculate Optional, recalculate the data instead of returning the cached result. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['artistMapForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function artistMapForUserAsyncWithHttpInfo($user_name, $range = null, $force_recalculate = false, string $contentType = self::contentTypes['artistMapForUser'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ArtistMapForUser';
        $request = $this->artistMapForUserRequest($user_name, $range, $force_recalculate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'artistMapForUser'
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  bool|null $force_recalculate Optional, recalculate the data instead of returning the cached result. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['artistMapForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function artistMapForUserRequest($user_name, $range = null, $force_recalculate = false, string $contentType = self::contentTypes['artistMapForUser'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling artistMapForUser'
            );
        }




        $resourcePath = '/1/stats/user/{user_name}/artist-map';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'AllowedStatisticsRange', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $force_recalculate,
            'force_recalculate', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation dailyActivityForUser
     *
     * Get the daily activity for user &#39;user_name&#39;.
     *
     * @param  string $user_name user_name (required)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dailyActivityForUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\DailyActivityForUser
     */
    public function dailyActivityForUser($user_name, $range = null, string $contentType = self::contentTypes['dailyActivityForUser'][0])
    {
        list($response) = $this->dailyActivityForUserWithHttpInfo($user_name, $range, $contentType);
        return $response;
    }

    /**
     * Operation dailyActivityForUserWithHttpInfo
     *
     * Get the daily activity for user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dailyActivityForUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\DailyActivityForUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function dailyActivityForUserWithHttpInfo($user_name, $range = null, string $contentType = self::contentTypes['dailyActivityForUser'][0])
    {
        $request = $this->dailyActivityForUserRequest($user_name, $range, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\DailyActivityForUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\DailyActivityForUser' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\DailyActivityForUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\DailyActivityForUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\DailyActivityForUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation dailyActivityForUserAsync
     *
     * Get the daily activity for user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dailyActivityForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dailyActivityForUserAsync($user_name, $range = null, string $contentType = self::contentTypes['dailyActivityForUser'][0])
    {
        return $this->dailyActivityForUserAsyncWithHttpInfo($user_name, $range, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation dailyActivityForUserAsyncWithHttpInfo
     *
     * Get the daily activity for user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dailyActivityForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function dailyActivityForUserAsyncWithHttpInfo($user_name, $range = null, string $contentType = self::contentTypes['dailyActivityForUser'][0])
    {
        $returnType = '\OpenAPI\Client\Model\DailyActivityForUser';
        $request = $this->dailyActivityForUserRequest($user_name, $range, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'dailyActivityForUser'
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['dailyActivityForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function dailyActivityForUserRequest($user_name, $range = null, string $contentType = self::contentTypes['dailyActivityForUser'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling dailyActivityForUser'
            );
        }



        $resourcePath = '/1/stats/user/{user_name}/daily-activity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'AllowedStatisticsRange', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listenersForArtist
     *
     * Get top listeners for artist &#39;artist_mbid&#39;.
     *
     * @param  string $artist_mbid artist_mbid (required)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listenersForArtist'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ListenersForArtist
     */
    public function listenersForArtist($artist_mbid, $range = null, string $contentType = self::contentTypes['listenersForArtist'][0])
    {
        list($response) = $this->listenersForArtistWithHttpInfo($artist_mbid, $range, $contentType);
        return $response;
    }

    /**
     * Operation listenersForArtistWithHttpInfo
     *
     * Get top listeners for artist &#39;artist_mbid&#39;.
     *
     * @param  string $artist_mbid (required)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listenersForArtist'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ListenersForArtist, HTTP status code, HTTP response headers (array of strings)
     */
    public function listenersForArtistWithHttpInfo($artist_mbid, $range = null, string $contentType = self::contentTypes['listenersForArtist'][0])
    {
        $request = $this->listenersForArtistRequest($artist_mbid, $range, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ListenersForArtist' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ListenersForArtist' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ListenersForArtist', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ListenersForArtist';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ListenersForArtist',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listenersForArtistAsync
     *
     * Get top listeners for artist &#39;artist_mbid&#39;.
     *
     * @param  string $artist_mbid (required)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listenersForArtist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listenersForArtistAsync($artist_mbid, $range = null, string $contentType = self::contentTypes['listenersForArtist'][0])
    {
        return $this->listenersForArtistAsyncWithHttpInfo($artist_mbid, $range, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listenersForArtistAsyncWithHttpInfo
     *
     * Get top listeners for artist &#39;artist_mbid&#39;.
     *
     * @param  string $artist_mbid (required)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listenersForArtist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listenersForArtistAsyncWithHttpInfo($artist_mbid, $range = null, string $contentType = self::contentTypes['listenersForArtist'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ListenersForArtist';
        $request = $this->listenersForArtistRequest($artist_mbid, $range, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listenersForArtist'
     *
     * @param  string $artist_mbid (required)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listenersForArtist'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listenersForArtistRequest($artist_mbid, $range = null, string $contentType = self::contentTypes['listenersForArtist'][0])
    {

        // verify the required parameter 'artist_mbid' is set
        if ($artist_mbid === null || (is_array($artist_mbid) && count($artist_mbid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $artist_mbid when calling listenersForArtist'
            );
        }



        $resourcePath = '/1/stats/artist/{artist_mbid}/listeners';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'AllowedStatisticsRange', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($artist_mbid !== null) {
            $resourcePath = str_replace(
                '{' . 'artist_mbid' . '}',
                ObjectSerializer::toPathValue($artist_mbid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listenersForReleaseGroup
     *
     * Get top listeners for release group &#39;release_group_mbid&#39;.
     *
     * @param  string $release_group_mbid release_group_mbid (required)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listenersForReleaseGroup'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ListenersForReleaseGroup
     */
    public function listenersForReleaseGroup($release_group_mbid, $range = null, string $contentType = self::contentTypes['listenersForReleaseGroup'][0])
    {
        list($response) = $this->listenersForReleaseGroupWithHttpInfo($release_group_mbid, $range, $contentType);
        return $response;
    }

    /**
     * Operation listenersForReleaseGroupWithHttpInfo
     *
     * Get top listeners for release group &#39;release_group_mbid&#39;.
     *
     * @param  string $release_group_mbid (required)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listenersForReleaseGroup'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ListenersForReleaseGroup, HTTP status code, HTTP response headers (array of strings)
     */
    public function listenersForReleaseGroupWithHttpInfo($release_group_mbid, $range = null, string $contentType = self::contentTypes['listenersForReleaseGroup'][0])
    {
        $request = $this->listenersForReleaseGroupRequest($release_group_mbid, $range, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ListenersForReleaseGroup' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ListenersForReleaseGroup' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ListenersForReleaseGroup', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ListenersForReleaseGroup';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ListenersForReleaseGroup',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listenersForReleaseGroupAsync
     *
     * Get top listeners for release group &#39;release_group_mbid&#39;.
     *
     * @param  string $release_group_mbid (required)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listenersForReleaseGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listenersForReleaseGroupAsync($release_group_mbid, $range = null, string $contentType = self::contentTypes['listenersForReleaseGroup'][0])
    {
        return $this->listenersForReleaseGroupAsyncWithHttpInfo($release_group_mbid, $range, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listenersForReleaseGroupAsyncWithHttpInfo
     *
     * Get top listeners for release group &#39;release_group_mbid&#39;.
     *
     * @param  string $release_group_mbid (required)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listenersForReleaseGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listenersForReleaseGroupAsyncWithHttpInfo($release_group_mbid, $range = null, string $contentType = self::contentTypes['listenersForReleaseGroup'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ListenersForReleaseGroup';
        $request = $this->listenersForReleaseGroupRequest($release_group_mbid, $range, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listenersForReleaseGroup'
     *
     * @param  string $release_group_mbid (required)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listenersForReleaseGroup'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listenersForReleaseGroupRequest($release_group_mbid, $range = null, string $contentType = self::contentTypes['listenersForReleaseGroup'][0])
    {

        // verify the required parameter 'release_group_mbid' is set
        if ($release_group_mbid === null || (is_array($release_group_mbid) && count($release_group_mbid) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $release_group_mbid when calling listenersForReleaseGroup'
            );
        }



        $resourcePath = '/1/stats/release-group/{release_group_mbid}/listeners';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'AllowedStatisticsRange', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($release_group_mbid !== null) {
            $resourcePath = str_replace(
                '{' . 'release_group_mbid' . '}',
                ObjectSerializer::toPathValue($release_group_mbid),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation listeningActivityForUser
     *
     * Get the listening activity for user &#39;user_name&#39;.
     *
     * @param  string $user_name user_name (required)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listeningActivityForUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\ListeningActivityForUser
     */
    public function listeningActivityForUser($user_name, $range = null, string $contentType = self::contentTypes['listeningActivityForUser'][0])
    {
        list($response) = $this->listeningActivityForUserWithHttpInfo($user_name, $range, $contentType);
        return $response;
    }

    /**
     * Operation listeningActivityForUserWithHttpInfo
     *
     * Get the listening activity for user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listeningActivityForUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\ListeningActivityForUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function listeningActivityForUserWithHttpInfo($user_name, $range = null, string $contentType = self::contentTypes['listeningActivityForUser'][0])
    {
        $request = $this->listeningActivityForUserRequest($user_name, $range, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\ListeningActivityForUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\ListeningActivityForUser' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\ListeningActivityForUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\ListeningActivityForUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\ListeningActivityForUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation listeningActivityForUserAsync
     *
     * Get the listening activity for user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listeningActivityForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listeningActivityForUserAsync($user_name, $range = null, string $contentType = self::contentTypes['listeningActivityForUser'][0])
    {
        return $this->listeningActivityForUserAsyncWithHttpInfo($user_name, $range, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation listeningActivityForUserAsyncWithHttpInfo
     *
     * Get the listening activity for user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listeningActivityForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function listeningActivityForUserAsyncWithHttpInfo($user_name, $range = null, string $contentType = self::contentTypes['listeningActivityForUser'][0])
    {
        $returnType = '\OpenAPI\Client\Model\ListeningActivityForUser';
        $request = $this->listeningActivityForUserRequest($user_name, $range, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'listeningActivityForUser'
     *
     * @param  string $user_name (required)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['listeningActivityForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function listeningActivityForUserRequest($user_name, $range = null, string $contentType = self::contentTypes['listeningActivityForUser'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling listeningActivityForUser'
            );
        }



        $resourcePath = '/1/stats/user/{user_name}/listening-activity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'AllowedStatisticsRange', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sitewideArtistMap
     *
     * Get sitewide top recordings.
     *
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range range (optional)
     * @param  bool|null $force_recalculate Optional, recalculate the data instead of returning the cached result. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideArtistMap'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SitewideArtistMap
     */
    public function sitewideArtistMap($range = null, $force_recalculate = false, string $contentType = self::contentTypes['sitewideArtistMap'][0])
    {
        list($response) = $this->sitewideArtistMapWithHttpInfo($range, $force_recalculate, $contentType);
        return $response;
    }

    /**
     * Operation sitewideArtistMapWithHttpInfo
     *
     * Get sitewide top recordings.
     *
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  bool|null $force_recalculate Optional, recalculate the data instead of returning the cached result. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideArtistMap'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SitewideArtistMap, HTTP status code, HTTP response headers (array of strings)
     */
    public function sitewideArtistMapWithHttpInfo($range = null, $force_recalculate = false, string $contentType = self::contentTypes['sitewideArtistMap'][0])
    {
        $request = $this->sitewideArtistMapRequest($range, $force_recalculate, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SitewideArtistMap' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SitewideArtistMap' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SitewideArtistMap', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\SitewideArtistMap';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SitewideArtistMap',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sitewideArtistMapAsync
     *
     * Get sitewide top recordings.
     *
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  bool|null $force_recalculate Optional, recalculate the data instead of returning the cached result. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideArtistMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitewideArtistMapAsync($range = null, $force_recalculate = false, string $contentType = self::contentTypes['sitewideArtistMap'][0])
    {
        return $this->sitewideArtistMapAsyncWithHttpInfo($range, $force_recalculate, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sitewideArtistMapAsyncWithHttpInfo
     *
     * Get sitewide top recordings.
     *
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  bool|null $force_recalculate Optional, recalculate the data instead of returning the cached result. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideArtistMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitewideArtistMapAsyncWithHttpInfo($range = null, $force_recalculate = false, string $contentType = self::contentTypes['sitewideArtistMap'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SitewideArtistMap';
        $request = $this->sitewideArtistMapRequest($range, $force_recalculate, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sitewideArtistMap'
     *
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  bool|null $force_recalculate Optional, recalculate the data instead of returning the cached result. (optional, default to false)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideArtistMap'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sitewideArtistMapRequest($range = null, $force_recalculate = false, string $contentType = self::contentTypes['sitewideArtistMap'][0])
    {




        $resourcePath = '/1/stats/sitewide/artist-map';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'AllowedStatisticsRange', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $force_recalculate,
            'force_recalculate', // param base name
            'boolean', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sitewideListeningActivity
     *
     * Get sitewide top recordings.
     *
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideListeningActivity'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SitewideListeningActivity
     */
    public function sitewideListeningActivity($range = null, string $contentType = self::contentTypes['sitewideListeningActivity'][0])
    {
        list($response) = $this->sitewideListeningActivityWithHttpInfo($range, $contentType);
        return $response;
    }

    /**
     * Operation sitewideListeningActivityWithHttpInfo
     *
     * Get sitewide top recordings.
     *
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideListeningActivity'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SitewideListeningActivity, HTTP status code, HTTP response headers (array of strings)
     */
    public function sitewideListeningActivityWithHttpInfo($range = null, string $contentType = self::contentTypes['sitewideListeningActivity'][0])
    {
        $request = $this->sitewideListeningActivityRequest($range, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SitewideListeningActivity' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SitewideListeningActivity' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SitewideListeningActivity', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\SitewideListeningActivity';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SitewideListeningActivity',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sitewideListeningActivityAsync
     *
     * Get sitewide top recordings.
     *
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideListeningActivity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitewideListeningActivityAsync($range = null, string $contentType = self::contentTypes['sitewideListeningActivity'][0])
    {
        return $this->sitewideListeningActivityAsyncWithHttpInfo($range, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sitewideListeningActivityAsyncWithHttpInfo
     *
     * Get sitewide top recordings.
     *
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideListeningActivity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitewideListeningActivityAsyncWithHttpInfo($range = null, string $contentType = self::contentTypes['sitewideListeningActivity'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SitewideListeningActivity';
        $request = $this->sitewideListeningActivityRequest($range, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sitewideListeningActivity'
     *
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideListeningActivity'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sitewideListeningActivityRequest($range = null, string $contentType = self::contentTypes['sitewideListeningActivity'][0])
    {



        $resourcePath = '/1/stats/sitewide/listening-activity';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'AllowedStatisticsRange', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sitewideTopArtists
     *
     * Get sitewide top artists.
     *
     * @param  int|null $count count (optional, default to 25)
     * @param  int|null $offset offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideTopArtists'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SitewideTopArtists
     */
    public function sitewideTopArtists($count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['sitewideTopArtists'][0])
    {
        list($response) = $this->sitewideTopArtistsWithHttpInfo($count, $offset, $range, $contentType);
        return $response;
    }

    /**
     * Operation sitewideTopArtistsWithHttpInfo
     *
     * Get sitewide top artists.
     *
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideTopArtists'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SitewideTopArtists, HTTP status code, HTTP response headers (array of strings)
     */
    public function sitewideTopArtistsWithHttpInfo($count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['sitewideTopArtists'][0])
    {
        $request = $this->sitewideTopArtistsRequest($count, $offset, $range, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SitewideTopArtists' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SitewideTopArtists' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SitewideTopArtists', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\SitewideTopArtists';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SitewideTopArtists',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sitewideTopArtistsAsync
     *
     * Get sitewide top artists.
     *
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideTopArtists'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitewideTopArtistsAsync($count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['sitewideTopArtists'][0])
    {
        return $this->sitewideTopArtistsAsyncWithHttpInfo($count, $offset, $range, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sitewideTopArtistsAsyncWithHttpInfo
     *
     * Get sitewide top artists.
     *
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideTopArtists'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitewideTopArtistsAsyncWithHttpInfo($count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['sitewideTopArtists'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SitewideTopArtists';
        $request = $this->sitewideTopArtistsRequest($count, $offset, $range, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sitewideTopArtists'
     *
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideTopArtists'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sitewideTopArtistsRequest($count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['sitewideTopArtists'][0])
    {





        $resourcePath = '/1/stats/sitewide/artists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'AllowedStatisticsRange', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sitewideTopRecordings
     *
     * Get sitewide top recordings.
     *
     * @param  int|null $count count (optional, default to 25)
     * @param  int|null $offset offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideTopRecordings'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SitewideTopRecordings
     */
    public function sitewideTopRecordings($count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['sitewideTopRecordings'][0])
    {
        list($response) = $this->sitewideTopRecordingsWithHttpInfo($count, $offset, $range, $contentType);
        return $response;
    }

    /**
     * Operation sitewideTopRecordingsWithHttpInfo
     *
     * Get sitewide top recordings.
     *
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideTopRecordings'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SitewideTopRecordings, HTTP status code, HTTP response headers (array of strings)
     */
    public function sitewideTopRecordingsWithHttpInfo($count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['sitewideTopRecordings'][0])
    {
        $request = $this->sitewideTopRecordingsRequest($count, $offset, $range, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SitewideTopRecordings' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SitewideTopRecordings' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SitewideTopRecordings', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\SitewideTopRecordings';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SitewideTopRecordings',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sitewideTopRecordingsAsync
     *
     * Get sitewide top recordings.
     *
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideTopRecordings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitewideTopRecordingsAsync($count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['sitewideTopRecordings'][0])
    {
        return $this->sitewideTopRecordingsAsyncWithHttpInfo($count, $offset, $range, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sitewideTopRecordingsAsyncWithHttpInfo
     *
     * Get sitewide top recordings.
     *
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideTopRecordings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitewideTopRecordingsAsyncWithHttpInfo($count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['sitewideTopRecordings'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SitewideTopRecordings';
        $request = $this->sitewideTopRecordingsRequest($count, $offset, $range, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sitewideTopRecordings'
     *
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideTopRecordings'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sitewideTopRecordingsRequest($count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['sitewideTopRecordings'][0])
    {





        $resourcePath = '/1/stats/sitewide/recordings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'AllowedStatisticsRange', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sitewideTopReleaseGroups
     *
     * Get sitewide top release groups.
     *
     * @param  int|null $count count (optional, default to 25)
     * @param  int|null $offset offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideTopReleaseGroups'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SitewideTopReleaseGroups
     */
    public function sitewideTopReleaseGroups($count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['sitewideTopReleaseGroups'][0])
    {
        list($response) = $this->sitewideTopReleaseGroupsWithHttpInfo($count, $offset, $range, $contentType);
        return $response;
    }

    /**
     * Operation sitewideTopReleaseGroupsWithHttpInfo
     *
     * Get sitewide top release groups.
     *
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideTopReleaseGroups'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SitewideTopReleaseGroups, HTTP status code, HTTP response headers (array of strings)
     */
    public function sitewideTopReleaseGroupsWithHttpInfo($count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['sitewideTopReleaseGroups'][0])
    {
        $request = $this->sitewideTopReleaseGroupsRequest($count, $offset, $range, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SitewideTopReleaseGroups' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SitewideTopReleaseGroups' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SitewideTopReleaseGroups', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\SitewideTopReleaseGroups';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SitewideTopReleaseGroups',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sitewideTopReleaseGroupsAsync
     *
     * Get sitewide top release groups.
     *
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideTopReleaseGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitewideTopReleaseGroupsAsync($count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['sitewideTopReleaseGroups'][0])
    {
        return $this->sitewideTopReleaseGroupsAsyncWithHttpInfo($count, $offset, $range, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sitewideTopReleaseGroupsAsyncWithHttpInfo
     *
     * Get sitewide top release groups.
     *
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideTopReleaseGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitewideTopReleaseGroupsAsyncWithHttpInfo($count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['sitewideTopReleaseGroups'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SitewideTopReleaseGroups';
        $request = $this->sitewideTopReleaseGroupsRequest($count, $offset, $range, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sitewideTopReleaseGroups'
     *
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideTopReleaseGroups'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sitewideTopReleaseGroupsRequest($count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['sitewideTopReleaseGroups'][0])
    {





        $resourcePath = '/1/stats/sitewide/release-groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'AllowedStatisticsRange', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation sitewideTopReleases
     *
     * Get sitewide top releases.
     *
     * @param  int|null $count count (optional, default to 25)
     * @param  int|null $offset offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideTopReleases'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\SitewideTopReleases
     */
    public function sitewideTopReleases($count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['sitewideTopReleases'][0])
    {
        list($response) = $this->sitewideTopReleasesWithHttpInfo($count, $offset, $range, $contentType);
        return $response;
    }

    /**
     * Operation sitewideTopReleasesWithHttpInfo
     *
     * Get sitewide top releases.
     *
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideTopReleases'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\SitewideTopReleases, HTTP status code, HTTP response headers (array of strings)
     */
    public function sitewideTopReleasesWithHttpInfo($count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['sitewideTopReleases'][0])
    {
        $request = $this->sitewideTopReleasesRequest($count, $offset, $range, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\SitewideTopReleases' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\SitewideTopReleases' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\SitewideTopReleases', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\SitewideTopReleases';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\SitewideTopReleases',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation sitewideTopReleasesAsync
     *
     * Get sitewide top releases.
     *
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideTopReleases'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitewideTopReleasesAsync($count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['sitewideTopReleases'][0])
    {
        return $this->sitewideTopReleasesAsyncWithHttpInfo($count, $offset, $range, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation sitewideTopReleasesAsyncWithHttpInfo
     *
     * Get sitewide top releases.
     *
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideTopReleases'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function sitewideTopReleasesAsyncWithHttpInfo($count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['sitewideTopReleases'][0])
    {
        $returnType = '\OpenAPI\Client\Model\SitewideTopReleases';
        $request = $this->sitewideTopReleasesRequest($count, $offset, $range, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'sitewideTopReleases'
     *
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['sitewideTopReleases'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function sitewideTopReleasesRequest($count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['sitewideTopReleases'][0])
    {





        $resourcePath = '/1/stats/sitewide/releases';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'AllowedStatisticsRange', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);




        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation topArtistsForUser
     *
     * Get top artists for user &#39;user_name&#39;.
     *
     * @param  string $user_name user_name (required)
     * @param  int|null $count count (optional, default to 25)
     * @param  int|null $offset offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['topArtistsForUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TopArtistsForUser
     */
    public function topArtistsForUser($user_name, $count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['topArtistsForUser'][0])
    {
        list($response) = $this->topArtistsForUserWithHttpInfo($user_name, $count, $offset, $range, $contentType);
        return $response;
    }

    /**
     * Operation topArtistsForUserWithHttpInfo
     *
     * Get top artists for user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['topArtistsForUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TopArtistsForUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function topArtistsForUserWithHttpInfo($user_name, $count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['topArtistsForUser'][0])
    {
        $request = $this->topArtistsForUserRequest($user_name, $count, $offset, $range, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TopArtistsForUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TopArtistsForUser' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TopArtistsForUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\TopArtistsForUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TopArtistsForUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation topArtistsForUserAsync
     *
     * Get top artists for user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['topArtistsForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function topArtistsForUserAsync($user_name, $count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['topArtistsForUser'][0])
    {
        return $this->topArtistsForUserAsyncWithHttpInfo($user_name, $count, $offset, $range, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation topArtistsForUserAsyncWithHttpInfo
     *
     * Get top artists for user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['topArtistsForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function topArtistsForUserAsyncWithHttpInfo($user_name, $count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['topArtistsForUser'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TopArtistsForUser';
        $request = $this->topArtistsForUserRequest($user_name, $count, $offset, $range, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'topArtistsForUser'
     *
     * @param  string $user_name (required)
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['topArtistsForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function topArtistsForUserRequest($user_name, $count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['topArtistsForUser'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling topArtistsForUser'
            );
        }





        $resourcePath = '/1/stats/user/{user_name}/artists';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'AllowedStatisticsRange', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation topRecordingsForUser
     *
     * Get top recordings for user &#39;user_name&#39;.
     *
     * @param  string $user_name user_name (required)
     * @param  int|null $count count (optional, default to 25)
     * @param  int|null $offset offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['topRecordingsForUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TopRecordingsForUser
     */
    public function topRecordingsForUser($user_name, $count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['topRecordingsForUser'][0])
    {
        list($response) = $this->topRecordingsForUserWithHttpInfo($user_name, $count, $offset, $range, $contentType);
        return $response;
    }

    /**
     * Operation topRecordingsForUserWithHttpInfo
     *
     * Get top recordings for user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['topRecordingsForUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TopRecordingsForUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function topRecordingsForUserWithHttpInfo($user_name, $count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['topRecordingsForUser'][0])
    {
        $request = $this->topRecordingsForUserRequest($user_name, $count, $offset, $range, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TopRecordingsForUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TopRecordingsForUser' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TopRecordingsForUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\TopRecordingsForUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TopRecordingsForUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation topRecordingsForUserAsync
     *
     * Get top recordings for user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['topRecordingsForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function topRecordingsForUserAsync($user_name, $count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['topRecordingsForUser'][0])
    {
        return $this->topRecordingsForUserAsyncWithHttpInfo($user_name, $count, $offset, $range, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation topRecordingsForUserAsyncWithHttpInfo
     *
     * Get top recordings for user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['topRecordingsForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function topRecordingsForUserAsyncWithHttpInfo($user_name, $count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['topRecordingsForUser'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TopRecordingsForUser';
        $request = $this->topRecordingsForUserRequest($user_name, $count, $offset, $range, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'topRecordingsForUser'
     *
     * @param  string $user_name (required)
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['topRecordingsForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function topRecordingsForUserRequest($user_name, $count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['topRecordingsForUser'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling topRecordingsForUser'
            );
        }





        $resourcePath = '/1/stats/user/{user_name}/recordings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'AllowedStatisticsRange', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation topReleaseGroupsForUser
     *
     * Get top release groups for user &#39;user_name&#39;.
     *
     * @param  string $user_name user_name (required)
     * @param  int|null $count count (optional, default to 25)
     * @param  int|null $offset offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['topReleaseGroupsForUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TopReleaseGroupsForUser
     */
    public function topReleaseGroupsForUser($user_name, $count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['topReleaseGroupsForUser'][0])
    {
        list($response) = $this->topReleaseGroupsForUserWithHttpInfo($user_name, $count, $offset, $range, $contentType);
        return $response;
    }

    /**
     * Operation topReleaseGroupsForUserWithHttpInfo
     *
     * Get top release groups for user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['topReleaseGroupsForUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TopReleaseGroupsForUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function topReleaseGroupsForUserWithHttpInfo($user_name, $count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['topReleaseGroupsForUser'][0])
    {
        $request = $this->topReleaseGroupsForUserRequest($user_name, $count, $offset, $range, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TopReleaseGroupsForUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TopReleaseGroupsForUser' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TopReleaseGroupsForUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\TopReleaseGroupsForUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TopReleaseGroupsForUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation topReleaseGroupsForUserAsync
     *
     * Get top release groups for user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['topReleaseGroupsForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function topReleaseGroupsForUserAsync($user_name, $count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['topReleaseGroupsForUser'][0])
    {
        return $this->topReleaseGroupsForUserAsyncWithHttpInfo($user_name, $count, $offset, $range, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation topReleaseGroupsForUserAsyncWithHttpInfo
     *
     * Get top release groups for user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['topReleaseGroupsForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function topReleaseGroupsForUserAsyncWithHttpInfo($user_name, $count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['topReleaseGroupsForUser'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TopReleaseGroupsForUser';
        $request = $this->topReleaseGroupsForUserRequest($user_name, $count, $offset, $range, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'topReleaseGroupsForUser'
     *
     * @param  string $user_name (required)
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['topReleaseGroupsForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function topReleaseGroupsForUserRequest($user_name, $count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['topReleaseGroupsForUser'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling topReleaseGroupsForUser'
            );
        }





        $resourcePath = '/1/stats/user/{user_name}/release-groups';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'AllowedStatisticsRange', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation topReleasesForUser
     *
     * Get top releases for user &#39;user_name&#39;.
     *
     * @param  string $user_name user_name (required)
     * @param  int|null $count count (optional, default to 25)
     * @param  int|null $offset offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['topReleasesForUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\TopReleasesForUser
     */
    public function topReleasesForUser($user_name, $count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['topReleasesForUser'][0])
    {
        list($response) = $this->topReleasesForUserWithHttpInfo($user_name, $count, $offset, $range, $contentType);
        return $response;
    }

    /**
     * Operation topReleasesForUserWithHttpInfo
     *
     * Get top releases for user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['topReleasesForUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\TopReleasesForUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function topReleasesForUserWithHttpInfo($user_name, $count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['topReleasesForUser'][0])
    {
        $request = $this->topReleasesForUserRequest($user_name, $count, $offset, $range, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\TopReleasesForUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\TopReleasesForUser' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\TopReleasesForUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\TopReleasesForUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\TopReleasesForUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation topReleasesForUserAsync
     *
     * Get top releases for user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['topReleasesForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function topReleasesForUserAsync($user_name, $count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['topReleasesForUser'][0])
    {
        return $this->topReleasesForUserAsyncWithHttpInfo($user_name, $count, $offset, $range, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation topReleasesForUserAsyncWithHttpInfo
     *
     * Get top releases for user &#39;user_name&#39;.
     *
     * @param  string $user_name (required)
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['topReleasesForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function topReleasesForUserAsyncWithHttpInfo($user_name, $count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['topReleasesForUser'][0])
    {
        $returnType = '\OpenAPI\Client\Model\TopReleasesForUser';
        $request = $this->topReleasesForUserRequest($user_name, $count, $offset, $range, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'topReleasesForUser'
     *
     * @param  string $user_name (required)
     * @param  int|null $count (optional, default to 25)
     * @param  int|null $offset (optional, default to 0)
     * @param  \OpenAPI\Client\Model\AllowedStatisticsRange|null $range (optional)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['topReleasesForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function topReleasesForUserRequest($user_name, $count = 25, $offset = 0, $range = null, string $contentType = self::contentTypes['topReleasesForUser'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling topReleasesForUser'
            );
        }





        $resourcePath = '/1/stats/user/{user_name}/releases';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $count,
            'count', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $offset,
            'offset', // param base name
            'integer', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);
        // query params
        $queryParams = array_merge($queryParams, ObjectSerializer::toQueryValue(
            $range,
            'range', // param base name
            'AllowedStatisticsRange', // openApiType
            '', // style
            false, // explode
            false // required
        ) ?? []);


        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation yearInMusicForUser
     *
     * Get sitewide top recordings.
     *
     * @param  string $user_name user_name (required)
     * @param  int $year year (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['yearInMusicForUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return \OpenAPI\Client\Model\YearInMusicForUser
     */
    public function yearInMusicForUser($user_name, $year, string $contentType = self::contentTypes['yearInMusicForUser'][0])
    {
        list($response) = $this->yearInMusicForUserWithHttpInfo($user_name, $year, $contentType);
        return $response;
    }

    /**
     * Operation yearInMusicForUserWithHttpInfo
     *
     * Get sitewide top recordings.
     *
     * @param  string $user_name (required)
     * @param  int $year (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['yearInMusicForUser'] to see the possible values for this operation
     *
     * @throws \OpenAPI\Client\ApiException on non-2xx response or if the response body is not in the expected format
     * @throws \InvalidArgumentException
     * @return array of \OpenAPI\Client\Model\YearInMusicForUser, HTTP status code, HTTP response headers (array of strings)
     */
    public function yearInMusicForUserWithHttpInfo($user_name, $year, string $contentType = self::contentTypes['yearInMusicForUser'][0])
    {
        $request = $this->yearInMusicForUserRequest($user_name, $year, $contentType);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (ConnectException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    (int) $e->getCode(),
                    null,
                    null
                );
            }

            $statusCode = $response->getStatusCode();


            switch($statusCode) {
                case 200:
                    if ('\OpenAPI\Client\Model\YearInMusicForUser' === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ('\OpenAPI\Client\Model\YearInMusicForUser' !== 'string') {
                            try {
                                $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                            } catch (\JsonException $exception) {
                                throw new ApiException(
                                    sprintf(
                                        'Error JSON decoding server response (%s)',
                                        $request->getUri()
                                    ),
                                    $statusCode,
                                    $response->getHeaders(),
                                    $content
                                );
                            }
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\OpenAPI\Client\Model\YearInMusicForUser', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        (string) $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    (string) $response->getBody()
                );
            }

            $returnType = '\OpenAPI\Client\Model\YearInMusicForUser';
            if ($returnType === '\SplFileObject') {
                $content = $response->getBody(); //stream goes to serializer
            } else {
                $content = (string) $response->getBody();
                if ($returnType !== 'string') {
                    try {
                        $content = json_decode($content, false, 512, JSON_THROW_ON_ERROR);
                    } catch (\JsonException $exception) {
                        throw new ApiException(
                            sprintf(
                                'Error JSON decoding server response (%s)',
                                $request->getUri()
                            ),
                            $statusCode,
                            $response->getHeaders(),
                            $content
                        );
                    }
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\OpenAPI\Client\Model\YearInMusicForUser',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation yearInMusicForUserAsync
     *
     * Get sitewide top recordings.
     *
     * @param  string $user_name (required)
     * @param  int $year (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['yearInMusicForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function yearInMusicForUserAsync($user_name, $year, string $contentType = self::contentTypes['yearInMusicForUser'][0])
    {
        return $this->yearInMusicForUserAsyncWithHttpInfo($user_name, $year, $contentType)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation yearInMusicForUserAsyncWithHttpInfo
     *
     * Get sitewide top recordings.
     *
     * @param  string $user_name (required)
     * @param  int $year (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['yearInMusicForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function yearInMusicForUserAsyncWithHttpInfo($user_name, $year, string $contentType = self::contentTypes['yearInMusicForUser'][0])
    {
        $returnType = '\OpenAPI\Client\Model\YearInMusicForUser';
        $request = $this->yearInMusicForUserRequest($user_name, $year, $contentType);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    if ($returnType === '\SplFileObject') {
                        $content = $response->getBody(); //stream goes to serializer
                    } else {
                        $content = (string) $response->getBody();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        (string) $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'yearInMusicForUser'
     *
     * @param  string $user_name (required)
     * @param  int $year (required)
     * @param  string $contentType The value for the Content-Type header. Check self::contentTypes['yearInMusicForUser'] to see the possible values for this operation
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    public function yearInMusicForUserRequest($user_name, $year, string $contentType = self::contentTypes['yearInMusicForUser'][0])
    {

        // verify the required parameter 'user_name' is set
        if ($user_name === null || (is_array($user_name) && count($user_name) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_name when calling yearInMusicForUser'
            );
        }

        // verify the required parameter 'year' is set
        if ($year === null || (is_array($year) && count($year) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $year when calling yearInMusicForUser'
            );
        }


        $resourcePath = '/1/stats/user/{user_name}/year-in-music/{year}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // path params
        if ($user_name !== null) {
            $resourcePath = str_replace(
                '{' . 'user_name' . '}',
                ObjectSerializer::toPathValue($user_name),
                $resourcePath
            );
        }
        // path params
        if ($year !== null) {
            $resourcePath = str_replace(
                '{' . 'year' . '}',
                ObjectSerializer::toPathValue($year),
                $resourcePath
            );
        }


        $headers = $this->headerSelector->selectHeaders(
            ['application/json', ],
            $contentType,
            $multipart
        );

        // for model (json/xml)
        if (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $multipartContents[] = [
                            'name' => $formParamName,
                            'contents' => $formParamValueItem
                        ];
                    }
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif (stripos($headers['Content-Type'], 'application/json') !== false) {
                # if Content-Type contains "application/json", json_encode the form parameters
                $httpBody = \GuzzleHttp\Utils::jsonEncode($formParams);
            } else {
                // for HTTP post (form)
                $httpBody = ObjectSerializer::buildQuery($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $operationHost = $this->config->getHost();
        $query = ObjectSerializer::buildQuery($queryParams);
        return new Request(
            'GET',
            $operationHost . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
