<?php
/**
 * LbCoreApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ListenBrainz Swagger - OpenAPI 3.0
 *
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Listenbrainz\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * LbCoreApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LbCoreApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for deleteListen
     *
     * Delete a particular listen from a user's listen history..
     *
     */
    public function testDeleteListen()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for latestImport
     *
     * Get the timestamp of the newest listen submitted by a user in previous imports to ListenBrainz..
     *
     */
    public function testLatestImport()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for lbRadioRecordingsForArtist
     *
     * Get recordings for use in LB radio with the given seed artist. The endpoint returns a dict of all the similar artists, including the seed artist. For each artists, there will be a list of dicts that contain recording_mbid, similar_artist_mbid and total_listen_count..
     *
     */
    public function testLbRadioRecordingsForArtist()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for lbRadioTags
     *
     * Get recordings for use in LB radio with the specified tags that match the requested criteria..
     *
     */
    public function testLbRadioTags()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listenCountForUser
     *
     * Get the number of listens for a user 'user_name'..
     *
     */
    public function testListenCountForUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for listensForUser
     *
     * Get listens for user 'user_name'..
     *
     */
    public function testListensForUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for playingNowForUser
     *
     * Get the listen being played right now for user 'user_name'.
     *
     */
    public function testPlayingNowForUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for recommendationPlaylistsForUser
     *
     * Fetch recommendation playlist metadata in JSPF format without recordings for 'playlist_user_name'. This endpoint only lists playlists that are to be shown on the listenbrainz.org recommendations pages..
     *
     */
    public function testRecommendationPlaylistsForUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchPlaylistForUser
     *
     * Search for a playlist by name for a user..
     *
     */
    public function testSearchPlaylistForUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchUsers
     *
     * Search a ListenBrainz-registered user..
     *
     */
    public function testSearchUsers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for servicesForUser
     *
     * Get list of services which are connected to a given user's account..
     *
     */
    public function testServicesForUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for similarUsersForUser
     *
     * Get the listen being played right now for user 'user_name'..
     *
     */
    public function testSimilarUsersForUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for similarityOfUserForUser
     *
     * Get the similarity of 'user_name' and 'other_user_name', based on their listening history..
     *
     */
    public function testSimilarityOfUserForUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for submitListens
     *
     * Submit listens to the server..
     *
     */
    public function testSubmitListens()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for validateToken
     *
     * Check whether a User Token is a valid entry in the database..
     *
     */
    public function testValidateToken()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
