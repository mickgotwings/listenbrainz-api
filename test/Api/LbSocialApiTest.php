<?php
/**
 * LbSocialApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ListenBrainz Swagger - OpenAPI 3.0
 *
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace OpenAPI\Client\Test\Api;

use \OpenAPI\Client\Configuration;
use \OpenAPI\Client\ApiException;
use \OpenAPI\Client\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * LbSocialApiTest Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LbSocialApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for createNotification
     *
     * Post a message with a link on a user's timeline. Only approved users are allowed to perform this action..
     *
     */
    public function testCreateNotification()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createReview
     *
     * Creates a CritiqueBrainz review event for the user. This also creates a corresponding review in CritiqueBrainz. Users need to have linked their ListenBrainz account with CritiqueBrainz first to use this endpoint successfully..
     *
     */
    public function testCreateReview()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for feedEvents
     *
     * CreatGet feed events for a user's timeline..
     *
     */
    public function testFeedEvents()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for feedEventsDelete
     *
     * Delete those events from user's feed that belong to them. Supports deletion of recommendation and notification. Along with the authorization token, post the event type and event id..
     *
     */
    public function testFeedEventsDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for feedEventsHide
     *
     * Hide events from the user feed, only recording_recommendation and recording_pin events that have been generated by the people one is following can be deleted via this endpoint..
     *
     */
    public function testFeedEventsHide()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for feedEventsListensFollowing
     *
     * Get feed's listen events for followed users..
     *
     */
    public function testFeedEventsListensFollowing()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for feedEventsListensSimilar
     *
     * Get feed's listen events for similar users..
     *
     */
    public function testFeedEventsListensSimilar()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for feedEventsUnhide
     *
     * Delete hidden events from the user feed, aka unhide events..
     *
     */
    public function testFeedEventsUnhide()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for follow
     *
     * Follow the user 'user_name'. A user token (found on https://listenbrainz.org/settings/ ) must be provided in the Authorization header!.
     *
     */
    public function testFollow()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for followers
     *
     * Fetch the list of followers of the user 'user_name'..
     *
     */
    public function testFollowers()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for following
     *
     * Fetch the list of users followed by the user 'user_name'..
     *
     */
    public function testFollowing()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for recommendPersonalRecording
     *
     * Make the user recommend a recording to their followers. The request should post the following data about the recording being recommended (either one of recording_msid or recording_mbid is sufficient), and also the list of followers getting recommended..
     *
     */
    public function testRecommendPersonalRecording()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for recommendRecording
     *
     * Make the user recommend a recording to their followers..
     *
     */
    public function testRecommendRecording()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for unfollow
     *
     * Unfollow the user 'user_name'. A user token (found on https://listenbrainz.org/settings/ ) must be provided in the Authorization header!.
     *
     */
    public function testUnfollow()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
