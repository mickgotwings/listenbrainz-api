<?php
/**
 * LbPlaylistsApiTest
 * PHP version 7.4
 *
 * @category Class
 * @package  Listenbrainz
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * ListenBrainz Swagger - OpenAPI 3.0
 *
 * OpenAPI client defintion.
 *
 * The version of the OpenAPI document: v-2024-07-17.0
 * Generated by: https://openapi-generator.tech
 * Generator version: 7.12.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Please update the test case below to test the endpoint.
 */

namespace Listenbrainz\Test\Api;

use \Listenbrainz\Configuration;
use \Listenbrainz\ApiException;
use \Listenbrainz\ObjectSerializer;
use PHPUnit\Framework\TestCase;

/**
 * LbPlaylistsApiTest Class Doc Comment
 *
 * @category Class
 * @package  Listenbrainz
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class LbPlaylistsApiTest extends TestCase
{

    /**
     * Setup before running any test cases
     */
    public static function setUpBeforeClass(): void
    {
    }

    /**
     * Setup before running each test case
     */
    public function setUp(): void
    {
    }

    /**
     * Clean up after running each test case
     */
    public function tearDown(): void
    {
    }

    /**
     * Clean up after running all test cases
     */
    public static function tearDownAfterClass(): void
    {
    }

    /**
     * Test case for appendRecordings
     *
     * Append recordings to an existing playlist by posting a playlist with one of more recordings in it. The playlist must be in JSPF format with MusicBrainz extensions, which is defined here: https://musicbrainz.org/doc/jspf .  If the offset is provided in the URL, then the recordings will be added at that offset, otherwise they will be added at the end of the playlist..
     *
     */
    public function testAppendRecordings()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for copyPlaylist
     *
     * Copy a playlist - the new playlist will be given the name “Copy of <playlist_name>”. POST body data does not need to contain anything..
     *
     */
    public function testCopyPlaylist()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for createPlaylist
     *
     * Create a playlist.
     *
     */
    public function testCreatePlaylist()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for deletePlaylist
     *
     * Delete a playlist..
     *
     */
    public function testDeletePlaylist()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for editPlaylist
     *
     * Create a playlist. The playlist must be in JSPF format with MusicBrainz extensions, which is defined here: https://musicbrainz.org/doc/jspf . To create an empty playlist, you can send an empty playlist with only the title field filled out. If you would like to create a playlist populated with recordings, each of the track items in the playlist must have an identifier element that contains the MusicBrainz recording that includes the recording MBID.  When creating a playlist, only the playlist title and the track identifier elements will be used - all other elements in the posted JSPF wil be ignored.  If a created_for field is found and the user is not an approved playlist bot, then a 403 forbidden will be raised..
     *
     */
    public function testEditPlaylist()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for fetchPlaylist
     *
     * Fetch the given playlist..
     *
     */
    public function testFetchPlaylist()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for itemDelete
     *
     * Delete an item in a playlist..
     *
     */
    public function testItemDelete()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for moveItem
     *
     * To move an item in a playlist, the POST data needs to specify the recording MBID and current index of the track to move (from), where to move it to (to) and how many tracks from that position should be moved (count)..
     *
     */
    public function testMoveItem()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for playlistsCreatedForUser
     *
     * Fetch playlist metadata in JSPF format without recordings that have been created for the user..
     *
     */
    public function testPlaylistsCreatedForUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for playlistsForUser
     *
     * Fetch playlist metadata in JSPF format without recordings for the given user..
     *
     */
    public function testPlaylistsForUser()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for playlistsForUserCollaborator
     *
     * Fetch playlist metadata in JSPF format without recordings for which a user is a collaborator. If a playlist is private, it will only be returned if the caller is authorized to edit that playlist..
     *
     */
    public function testPlaylistsForUserCollaborator()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }

    /**
     * Test case for searchPlaylists
     *
     * Search for playlists by name or description. The search query must be at least 3 characters long..
     *
     */
    public function testSearchPlaylists()
    {
        // TODO: implement
        self::markTestIncomplete('Not implemented');
    }
}
